swagger: '2.0'
info:
  description: Operations can be done with OpenArchi models.
  version: 1.0.0
  title: OpenArchi API
  contact:
    email: alejandromanuel.mendez.aragua@bbva.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: "@HOST@"
basePath: "/open-archi/api"
tags:
- name: Models
  description: Set of functionalities related to model
schemes:
- http
- https
paths:
  "/models":
    options:
      tags:
      - Models
      summary: Shows options for models object
      operationId: options-models
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Collection"
            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Models
      summary: Finds models
      description: This service supports query by using RSQL expressions
      operationId: get-models
      produces:
      - application/json
      parameters:
      - name: "$filter"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Models"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add a new model
      description: ''
      operationId: add-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
          schema:
            type: array
            items:
              $ref: "#/definitions/Models"
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/batch":
    options:
      tags:
      - Models
      summary: Shows options for batch models objects processing
      operationId: options-models-batch
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Options_Post_Collection"
    post:
      tags:
      - Models
      summary: Add a list of models
      description: ''
      operationId: add-models
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: List of model objects that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Models_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
          schema:
            type: array
            items:
              $ref: "#/definitions/Models_Create"
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/:model-id":
    options:
      tags:
      - Models
      summary: Shows options for a specific model object
      operationId: options-model
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Options_Get"
  "/models/{model-id}":
    get:
      tags:
      - Models
      summary: Find a model by ID
      description: Returns a single model
      operationId: get-model-by-id
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: "#/definitions/Model"
        '400':
          description: Invalid ID supplied
        '404':
          description: Model not found
  "/models/:model-id/children":
    options:
      tags:
      - Models
      summary: Shows options for the children objects of a specific model
      operationId: options-model-children
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Collection"
            - $ref: "#/definitions/Options_Put"
  "/models/{model-id}/children":
    get:
      tags:
      - Models
      summary: Finds children of a model
      description: This service supports query by using RSQL expressions
      operationId: get-model-children
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - name: "$filter"
        in: query
        description: Filter children of a model according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Composite_Element"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    put:
      tags:
      - Models
      summary: Add a new child to the model
      description: If the child object does not exists previously, it will be created.
      operationId: add-model-child
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - in: body
        name: body
        description: Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Composite_Element_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/:model-id/parent":
    options:
      tags:
      - Models
      summary: Shows options for the parent object of a specific model
      operationId: options-model-parent
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get"
            - $ref: "#/definitions/Options_Post"
  "/models/{model-id}/parent":
    get:
      tags:
      - Models
      summary: Find the parent of a model
      description: Gets the full info related to the parent of the model
      operationId: get-model-parent
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add a parent to the current model
      description: Relates an existing model as a parent of the current one. If parent model does not exists an error will occur. Only model parent id is required
      operationId: add-model-parent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to return
        required: true
        type: string
      - in: body
        name: body
        description: Model object that needs to be added as a parent of the current model
        required: true
        schema:
          $ref: "#/definitions/Model_Parent_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/:model-id/meta-data":
    options:
      tags:
      - Models
      summary: Shows options for the meta data info of a specific model
      operationId: options-model-meta-data
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get"
            - $ref: "#/definitions/Options_Post"
  "/models/{model-id}/meta-data":
    get:
      tags:
      - Models
      summary: Get the model's meta data
      description: Gets the full meta data info related to the model
      operationId: get-model-meta-data
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which return its meta data
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Meta_Data"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add the meta-data of the current model
      description: Add the meta-data of the current model
      operationId: add-meta-data
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to add meta data
        required: true
        type: string
      - in: body
        name: body
        description: MetaData object that needs to be added to the current model
        required: true
        schema:
          $ref: "#/definitions/Meta_Data_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/:model-id/features":
    options:
      tags:
      - Models
      summary: Shows options for the features of a specific model
      operationId: options-model-features
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Collection"
            - $ref: "#/definitions/Options_Put"
  "/models/{model-id}/features":
    get:
      tags:
      - Models
      summary: Get the model's features
      description: Gets the full features info related to the model
      operationId: get-model-features
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which return its features
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Feature"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    put:
      tags:
      - Models
      summary: Add a feature to the current model
      description: Add a feature to the current model
      operationId: add-feature
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to add the feature
        required: true
        type: string
      - in: body
        name: body
        description: Feature object that needs to be added to the current model
        required: true
        schema:
          $ref: "#/definitions/Feature_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/architectures":
    options:
      tags:
      - Models
      summary: Shows options for architecture diagram
      operationId: options-architecture
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Collection"
            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Models
      summary: Finds models of the type architecture
      description: This service supports query by using RSQL expressions
      operationId: get-architecture-models
      produces:
      - application/json
      parameters:
      - name: "$filter"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Architecture_Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add a new model of the type architecture
      description: ''
      operationId: add-architecture-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Architecture Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Architecture_Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/architectures/:model-id/relationships":
    options:
      tags:
      - Models
      summary: Shows options for the relationships of a specific model
      operationId: options-model-relationships
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Collection"
            - $ref: "#/definitions/Options_Put"
  "/models/architectures/{model-id}/relationships":
    get:
      tags:
      - Models
      summary: Get the model's relationships
      description: Gets the full relationships info related to the model
      operationId: get-model-relationships
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to which return its relationships
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Architecture_Relationship"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    put:
      tags:
      - Models
      summary: Add a relationship to the current model
      description: Add a relationship to the current model
      operationId: add-relationship
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: model-id
        in: path
        description: ID of the model to add the relationship
        required: true
        type: string
      - in: body
        name: body
        description: Relationship object that needs to be added to the current model
        required: true
        schema:
          $ref: "#/definitions/Architecture_Relationship_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/bpms":
    options:
      tags:
      - Models
      summary: Shows options for BPM diagram
      operationId: options-bpm
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Collection"
            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Models
      summary: Finds models of the type bpm
      description: This service supports query by using RSQL expressions
      operationId: get-bpm-models
      produces:
      - application/json
      parameters:
      - name: "$filter"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Architecture_Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add a new model of the type bpm
      description: ''
      operationId: add-bpm-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Bpm Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Architecture_Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/flowcharts":
    options:
      tags:
      - Models
      summary: Shows options for flowcharts diagram
      operationId: options-flowcharts
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Collection"
            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Models
      summary: Finds models of the type flowchart
      description: This service supports query by using RSQL expressions
      operationId: get-flowchart-models
      produces:
      - application/json
      parameters:
      - name: "$filter"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Architecture_Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add a new model of the type flowchart
      description: ''
      operationId: add-flowchart-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Flowchart Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Architecture_Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/gantts":
    options:
      tags:
      - Models
      summary: Shows options for gantts diagram
      operationId: options-gantt
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Collection"
            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Models
      summary: Finds models of the type gantt
      description: This service supports query by using RSQL expressions
      operationId: get-gantt-models
      produces:
      - application/json
      parameters:
      - name: "$filter"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Architecture_Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add a new model of the type gantt
      description: ''
      operationId: add-gantt-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Gantt Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Architecture_Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - write:model
        - read:models
  "/models/sequences":
    options:
      tags:
      - Models
      summary: Shows options for sequences diagram
      operationId: options-sequence
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Collection"
            - $ref: "#/definitions/Options_Post"
    get:
      tags:
      - Models
      summary: Finds models of the type sequence
      description: This service supports query by using RSQL expressions
      operationId: get-sequence-models
      produces:
      - application/json
      parameters:
      - name: "$filter"
        in: query
        description: Filter models according to an RSQL expression
        required: false
        type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Architecture_Model"
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:models
    post:
      tags:
      - Models
      summary: Add a new model of the type sequence
      description: ''
      operationId: add-sequence-model
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Sequence Model object that needs to be added
        required: true
        schema:
          $ref: "#/definitions/Architecture_Model_Create"
      responses:
        '200':
          description: Accepted
        '201':
          description: Created
        '405':
          description: Invalid input
      security:
      - openarchi_auth:
        - read:models
  "/catalogs/diagram-types":
    options:
      tags:
      - Catalogs
      summary: Shows options for catalogs of diagram types
      operationId: options-catalogs-diagram-types
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_String_Collection"
            - $ref: "#/definitions/Options_Post_String"
    get:
      tags:
      - Catalogs
      summary: Finds diagram's types
      description: Returns all permitted and implemented diagram types
      operationId: get-diagram-types
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
    post:
      tags:
      - Catalogs
      summary: Request for the addition of a new diagram type
      description: ''
      operationId: post-diagram-types
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Diagram type that needs to be added
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Accepted
        '501':
          description: Not implemented
      security:
      - openarchi_auth:
        - write:catalogs
        - read:catalogs
  "/catalogs/prototype-names":
    options:
      tags:
      - Catalogs
      summary: Shows options for catalogs of prototype names
      operationId: options-catalogs-prototype-names
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Id_Name_Collection"
            - $ref: "#/definitions/Options_Post_String"
    get:
      tags:
      - Catalogs
      summary: Finds prototype's names
      description: Returns all permitted and implemented prototype's names
      operationId: get-prototypes-names
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
    post:
      tags:
      - Catalogs
      summary: Request for the addition of a new prototype name
      description: ''
      operationId: post-prototype-name
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Prototype name that needs to be added
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Accepted
        '501':
          description: Not implemented
      security:
      - openarchi_auth:
        - write:catalogs
        - read:catalogs
  "/catalogs/diagram-names":
    options:
      tags:
      - Catalogs
      summary: Shows options for catalogs of diagram names
      operationId: options-catalogs-diagram-names
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
            - $ref: "#/definitions/Options_Get_Id_Name_Collection"
            - $ref: "#/definitions/Options_Post_String"
    get:
      tags:
      - Catalogs
      summary: Finds diagram's names
      description: Returns all permitted and implemented diagram's names
      operationId: get-diagrams-names
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: string
        '400':
          description: Bad request
      security:
      - openarchi_auth:
        - read:catalogs
    post:
      tags:
      - Catalogs
      summary: Request for the addition of a new diagram name
      description: ''
      operationId: post-diagram-name
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Diagram name that needs to be added
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Accepted
        '501':
          description: Not implemented
      security:
      - openarchi_auth:
        - write:catalogs
        - read:catalogs
securityDefinitions:
  openarchi_auth:
    type: oauth2
    authorizationUrl: https://@HOST@/oauth/dialog
    flow: implicit
    scopes:
      write:model: Modify or add a model
      read:models: Read models
      write:catalogs: Modify or add a catalog
      read:catalogs: Read catalogs
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Account:
    description: Account
    type: object
    properties:
      id:
        type: string
        description: Account identifier
      email:
        type: string
        description: Email of the account
      login:
        type: string
        description: Login
      password:
        type: string
        description: Password of the account
      firstAccess:
        type: boolean
        description: Indicator for showing whether this is the first access to the account or not
      roles:
        type: array
        description: Roles that an account have
        items:
          $ref: "#/definitions/Role"
  Accounts:
    description: Account
    type: object
    properties:
      id:
        type: string
        description: Account identifier
      email:
        type: string
        description: Email of the account
      login:
        type: string
        description: Login
      password:
        type: string
        description: Password of the account
      firstAccess:
        type: boolean
        description: Indicator for showing whether this is the first access to the account or not
      roles:
        type: array
        description: Roles that an account have
        items:
          $ref: "#/definitions/Roles"
  Account_Create:
    description: Account
    type: object
    properties:
      email:
        type: string
        description: Email of the account
      login:
        type: string
        description: Login
      password:
        type: string
        description: Password of the account
      roles:
        type: array
        description: Roles that an account have
        items:
          $ref: "#/definitions/Role_Create"
  Activity:
    description: Lane's activity
    type: object
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
  Activities:
    description: Lane's activity
    type: object
    allOf:
    - $ref: "#/definitions/Base_Entities"
    - type: object
  Activity_Create:
    description: Lane's activity
    type: object
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
  Architecture_Model:
    type: object
    description: Architecture Model object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - ARCHITECTURE_MODEL
        consumers:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/Consumer"
        softwareSystems:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/Software_System"
        deploymentNodes:
          type: array
          description: Deployment node of the model
          items:
            $ref: "#/definitions/Deployment_Node"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Architecture_Relationship"
      required:
      - kind
  Architecture_Models:
    type: object
    description: Architecture Model object
    allOf:
    - $ref: "#/definitions/Elements"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - ARCHITECTURE_MODEL
        consumers:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/Consumers"
        softwareSystems:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/Software_Systems"
        deploymentNodes:
          type: array
          description: Deployment node of the model
          items:
            $ref: "#/definitions/Deployment_Nodes"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Architecture_Relationships"
      required:
      - kind
  Architecture_Model_Create:
    type: object
    description: Architecture Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - ARCHITECTURE_MODEL
        consumers:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/Consumer_Create"
        softwareSystems:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/Software_System_Create"
        deploymentNodes:
          type: array
          description: Deployment node of the model
          items:
            $ref: "#/definitions/Deployment_Node_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Architecture_Relationship_Create"
      required:
      - kind
  Architecture_Models_Create:
    type: object
    description: Architecture Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - ARCHITECTURE_MODEL
        consumers:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/Consumer_Create"
        softwareSystems:
          type: array
          description: Consumers of the model
          items:
            $ref: "#/definitions/Software_System_Create"
        deploymentNodes:
          type: array
          description: Deployment node of the model
          items:
            $ref: "#/definitions/Deployment_Node_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Architecture_Relationship_Create"
      required:
      - kind
  Architecture_Relationship:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship"
    - type: object
      properties:
        technology:
          type: string
          description: Technology that underlies the relationship between architecture's components
        interactionStyle:
          type: string
          description: Type of interaction between architecture's components
          enum:
          - SYNCHRONOUS
          - ASYNCHRONOUS
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Architecture_Relationship_Create:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship_Create"
    - type: object
      properties:
        technology:
          type: string
          description: Technology that underlies the relationship between architecture's components
        interactionStyle:
          type: string
          description: Type of interaction between architecture's components
          enum:
          - SYNCHRONOUS
          - ASYNCHRONOUS
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Architecture_Relationships:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationships"
    - type: object
      properties:
        technology:
          type: string
          description: Technology that underlies the relationship between architecture's components
        interactionStyle:
          type: string
          description: Type of interaction between architecture's components
          enum:
          - SYNCHRONOUS
          - ASYNCHRONOUS
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Base_Entity:
    type: object
    description: Basic entity info for managing a model
    properties:
      id:
        type: string
        description: Model identifier
      meta:
        $ref: "#/definitions/Meta_Info"
        description: Meta info related to the model
    required:
    - id
    - meta
  Base_Entities:
    type: object
    description: Basic entity info for managing a model
    properties:
      id:
        type: string
        description: Model identifier
      meta:
        $ref: "#/definitions/Meta_Info_List"
        description: Meta info related to the model
    required:
    - id
    - meta
  Base_Entity_Create:
    type: object
    description: Basic entity info for managing a model
    properties:
      meta:
        $ref: "#/definitions/Meta_Info_Create"
        description: Meta info related to the model
  BPM_Model:
    type: object
    description: BPM Model object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - BPM_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Pool"
        relationships:
          type: array
          items:
            $ref: "#/definitions/BPM_Relationship"
      required:
      - kind
  BPM_Model_Create:
    description: BPM Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - BPM_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Pool_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Architecture_Relationship_Create"
      required:
      - kind
  BPM_Relationship:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  BPM_Relationships:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationships"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  BPM_Relationship_Create:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship_Create"
    - properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  BPM_Models:
    type: object
    description: BPM Model object
    allOf:
    - $ref: "#/definitions/Elements"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - BPM_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Pools"
        relationships:
          type: array
          items:
            $ref: "#/definitions/BPM_Relationships"
      required:
      - kind
  BPM_Models_Create:
    description: BPM Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - BPM_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Pool_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Architecture_Relationship_Create"
      required:
      - kind
  Consumer:
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element"
    - type: object
      properties:
        scope:
          description: Scope on which this customer is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        kind:
          type: string
          enum:
          - CONSUMER
  Consumer_Create:
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element_Create"
    - type: object
      properties:
        scope:
          description: Scope on which this customer is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        kind:
          type: string
          enum:
          - CONSUMER
  Consumers:
    type: object
    allOf:
    - $ref: "#/definitions/Static_Elements"
    - type: object
      properties:
        scope:
          description: Scope on which this customer is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        kind:
          type: string
          enum:
          - CONSUMER
  Container:
    type: object
    description: Container
    properties:
      technology:
        type: string
        description: Technology that underlied this container
      components:
        type: array
        description: Components that conforms this container
        items:
          $ref: "#/definitions/Component"
  Containers:
    type: object
    description: Container
    properties:
      technology:
        type: string
        description: Technology that underlied this container
  Container_Create:
    type: object
    description: Container
    properties:
      technology:
        type: string
        description: Technology that underlied this container
      components:
        type: array
        description: Components that conforms this container
        items:
          $ref: "#/definitions/Component_Create"
  Container_Instance:
    description: Container Instance
    type: object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        container:
          description: Container
          $ref: "#/definitions/Container"
        containerId:
          description: Container identifier
          type: string
        instanceId:
          description: Instance identifier
          type: integer
          format: int32
        kind:
          type: string
          description: Type of element
          enum:
          - CONTAINER
  Container_Instance_Create:
    description: Container Instance
    type: object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        container:
          description: Container
          $ref: "#/definitions/Container_Create"
        containerId:
          description: Container identifier
          type: string
        instanceId:
          description: Instance identifier
          type: integer
          format: int32
        kind:
          type: string
          description: Type of element
          enum:
          - CONTAINER
  Container_Instances:
    description: Container instances list
    type: object
    allOf:
    - $ref: "#/definitions/Elements"
    - type: object
      properties:
        container:
          description: Container
          $ref: "#/definitions/Containers"
        containerId:
          description: Container identifier
          type: string
        instanceId:
          description: Instance identifier
          type: integer
          format: int32
        kind:
          type: string
          description: Type of element
          enum:
          - CONTAINER
  Connect_Trigger:
    type: object
    description: Trigger for connecting an Item from or to any other Item
    properties:
      id:
        type: string
        description: Identifier of the trigger for connecting an Item from or to any other Item
      triggerById:
        type: string
        description: Identifier of an Item that can be connected from/to any other Item
      triggerByName:
        type: string
        description: Name of an Item that can be connected from/to any other Item
      triggerByExpression:
        type: string
        description: Regular expression, applied to the Item's name that can be connected from/to any other Item
  Connect_Triggers:
    type: object
    description: Trigger for connecting an Item from or to any other Item
    properties:
      id:
        type: string
        description: Identifier of the trigger for connecting an Item from or to any other Item
      triggerById:
        type: string
        description: Identifier of an Item that can be connected from/to any other Item
      triggerByName:
        type: string
        description: Name of an Item that can be connected from/to any other Item
      triggerByExpression:
        type: string
        description: Regular expression, applied to the Item's name that can be connected from/to any other Item
  Connect_Trigger_Create:
    type: object
    description: Trigger for connecting an Item from or to any other Item
    properties:
      triggerById:
        type: string
        description: Identifier of an Item that can be connected from/to any other Item
      triggerByName:
        type: string
        description: Name of an Item that can be connected from/to any other Item
      triggerByExpression:
        type: string
        description: Regular expression, applied to the Item's name that can be connected from/to any other Item
  Component:
    description: Component
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element"
    - type: object
      properties:
        technology:
          description: Technology
          type: string
        size:
          description: Components
          type: integer
          format: int64
  Component_Create:
    description: Component
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element_Create"
    - type: object
      properties:
        technology:
          description: Technology
          type: string
        size:
          description: Components
          type: integer
          format: int64
  Components:
    description: Component
    type: object
    allOf:
    - $ref: "#/definitions/Static_Elements"
    - type: object
      properties:
        technology:
          description: Technology
          type: string
        size:
          description: Components
          type: integer
          format: int64
  Composite_Element:
    type: object
    description: A reference to a taggable element
    properties:
      id:
        type: string
        description: Composite element identifier
      type:
        type: string
        description: Referenced element type
        enum:
        - ARCHITECTURE_MODEL
        - FLOWCHART_MODEL
        - SEQUENCE_MODEL
        - GANTT_MODEL
        - ENTITY_RELATIONSHIP_MODEL
        - UML_CLASS_MODEL
        - BPM_MODEL
        - ARCHITECTURE
        - FLOWCHART
        - SEQUENCE
        - GANTT
        - ENTITY_RELATIONSHIP
        - UML_CLASS
        - FEATURE
        - COMPONENT
        - CONTAINER
        - DEPLOYMENT
        - BPM
      link:
        type: string
        description: Link to the referenced element
    required:
    - id
    - type
  Composite_Elements:
    type: object
    description: A reference to a taggable element
    properties:
      id:
        type: string
        description: Composite element identifier
      type:
        type: string
        description: Referenced element type
        enum:
        - ARCHITECTURE_MODEL
        - FLOWCHART_MODEL
        - SEQUENCE_MODEL
        - GANTT_MODEL
        - ENTITY_RELATIONSHIP_MODEL
        - UML_CLASS_MODEL
        - BPM_MODEL
        - ARCHITECTURE
        - FLOWCHART
        - SEQUENCE
        - GANTT
        - ENTITY_RELATIONSHIP
        - UML_CLASS
        - FEATURE
        - COMPONENT
        - CONTAINER
        - DEPLOYMENT
        - BPM
      link:
        type: string
        description: Link to the referenced element
    required:
    - id
    - type
  Composite_Element_Create:
    type: object
    description: A reference to a taggable element
    properties:
      id:
        type: string
        description: Composite element identifier
      type:
        type: string
        description: Referenced element type
        enum:
        - ARCHITECTURE_MODEL
        - FLOWCHART_MODEL
        - SEQUENCE_MODEL
        - GANTT_MODEL
        - ENTITY_RELATIONSHIP_MODEL
        - UML_CLASS_MODEL
        - BPM_MODEL
        - ARCHITECTURE
        - FLOWCHART
        - SEQUENCE
        - GANTT
        - ENTITY_RELATIONSHIP
        - UML_CLASS
        - FEATURE
        - COMPONENT
        - CONTAINER
        - DEPLOYMENT
        - BPM
      link:
        type: string
        description: Link to the referenced element
    required:
    - id
    - type
  Element:
    type: object
    description: Abstract element object
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        url:
          type: string
          description: Url for the physical access to the of model
        properties:
          type: object
          description: Extensible and customizable properties related to an element
          additionalProperties:
            type: string
        features:
          type: array
          description: Features that conforms the model
          items:
            $ref: "#/definitions/Feature"
  Element_Create:
    type: object
    description: Abstract element object
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        url:
          type: string
          description: Url for the physical access to the of model
        properties:
          type: object
          description: Extensible and customizable properties related to an element
          additionalProperties:
            type: string
        features:
          type: array
          description: Features that conforms the model
          items:
            $ref: "#/definitions/Feature_Create"
  Elements:
    type: object
    description: Abstract element object
    allOf:
    - $ref: "#/definitions/Items"
    - type: object
      properties:
        url:
          type: string
          description: Url for the physical access to the of model
  Deployment_Node:
    description: Deployment Node
    type: object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        technology:
          description: Technology
          type: string
        instances:
          description: Instances
          type: integer
          format: int32
        kind:
          type: string
          description: Type of element
          enum:
          - DEPLOYMENT
        containerInstances:
          type: array
          items:
            $ref: "#/definitions/Container_Instance"
  Deployment_Node_Create:
    description: Deployment Node
    type: object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        technology:
          description: Technology
          type: string
        instances:
          description: Instances
          type: integer
          format: int32
        kind:
          type: string
          description: Type of element
          enum:
          - DEPLOYMENT
        containerInstances:
          type: array
          items:
            $ref: "#/definitions/Container_Instance_Create"
  Deployment_Nodes:
    description: Deployment Node
    type: object
    allOf:
    - $ref: "#/definitions/Elements"
    - type: object
      properties:
        technology:
          description: Technology
          type: string
        instances:
          description: Instances
          type: integer
          format: int32
        kind:
          type: string
          description: Type of element
          enum:
          - DEPLOYMENT
        containerInstances:
          type: array
          items:
            $ref: "#/definitions/Container_Instances"
  Feature:
    description: Feature an element can handle
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        role:
          type: string
          description: the role of the feature ... Primary or Supporting
          enum:
          - Primary
          - Supporting
        url:
          type: string
          description: a URL; e.g. a reference to the feature in source code control
        category:
          type: string
          description: the category of feature; e.g. class, interface, etc
          enum:
          - CATEGORY_1
          - CATEGORY_2
        visibility:
          type: string
          description: the visibility of the feature; e.g. public, package, private
        incomingConstraints:
          type: array
          description: Aspects that conditionates an element can have this feature
          items:
            $ref: "#/definitions/Constraint"
        outgoingConstraints:
          type: array
          description: Aspects that conditionates how this feature can be related to another element
          items:
            $ref: "#/definitions/Constraint"
        kind:
          type: string
          enum:
          - FEATURE
  Features:
    description: Feature an element can handle
    allOf:
    - $ref: "#/definitions/Items"
    - type: object
      properties:
        role:
          type: string
          description: the role of the feature ... Primary or Supporting
          enum:
          - Primary
          - Supporting
        url:
          type: string
          description: a URL; e.g. a reference to the feature in source code control
        category:
          type: string
          description: the category of feature; e.g. class, interface, etc
          enum:
          - CATEGORY_1
          - CATEGORY_2
        visibility:
          type: string
          description: the visibility of the feature; e.g. public, package, private
        kind:
          type: string
          enum:
          - FEATURE
  Feature_Create:
    description: Feature an element can handle
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        role:
          type: string
          description: the role of the feature ... Primary or Supporting
          enum:
          - Primary
          - Supporting
        url:
          type: string
          description: a URL; e.g. a reference to the feature in source code control
        category:
          type: string
          description: the category of feature; e.g. class, interface, etc
          enum:
          - CATEGORY_1
          - CATEGORY_2
        visibility:
          type: string
          description: the visibility of the feature; e.g. public, package, private
        incomingConstraints:
          type: array
          description: Aspects that conditionates an element can have this feature
          items:
            $ref: "#/definitions/Constraint_Create"
        outgoingConstraints:
          type: array
          description: Aspects that conditionates how this feature can be related to another element
          items:
            $ref: "#/definitions/Constraint_Create"
        kind:
          type: string
          enum:
          - FEATURE
  Flowchart_Model:
    type: object
    description: Flowchart Model object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Flowchart"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Flowchart_Relationship"
      required:
      - kind
  Flowchart_Model_Create:
    type: object
    description: Flowchart Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Flowchart_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Flowchart_Relationship_Create"
      required:
      - kind
  Flowchart_Relationship:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Flowchart_Relationships:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationships"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Flowchart_Relationship_Create:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship_Create"
    - properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Flowchart:
    type: object
    description: Flowchart
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        category:
          type: string
          description: Category
          enum:
          - ACTIVITY
          - DECISION_POINT
          - START
          - END
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART
      required:
      - category
      - kind
  Flowcharts:
    type: object
    description: Flowchart
    allOf:
    - $ref: "#/definitions/Items"
    - type: object
      properties:
        category:
          type: string
          description: Category
          enum:
          - ACTIVITY
          - DECISION_POINT
          - START
          - END
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART
      required:
      - category
      - kind
  Flowchart_Create:
    type: object
    description: Flowchart
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        category:
          type: string
          description: Category
          enum:
          - ACTIVITY
          - DECISION_POINT
          - START
          - END
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART
      required:
      - category
      - kind
  Flowchart_Models:
    type: object
    description: Flowchart Model object
    allOf:
    - $ref: "#/definitions/Elements"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Flowcharts"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Flowchart_Relationships"
      required:
      - kind
  Flowchart_Models_Create:
    type: object
    description: Flowchart Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - FLOWCHART_MODEL
        pools:
          type: array
          description: Pools of the model
          items:
            $ref: "#/definitions/Flowchart_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Flowchart_Relationship_Create"
      required:
      - kind
  Gantt:
    type: object
    description: Gantt
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        category:
          type: string
          description: Category
          enum:
          - ACTIVITY
          - START
          - END
        diagramStart:
          type: integer
          format: int32
          description: Start of the Gantt's activity
        diagramEnd:
          type: integer
          format: int32
          description: End of the Gantt's activity
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT
      required:
      - category
      - kind
  Gantts:
    type: object
    description: Gantt
    allOf:
    - $ref: "#/definitions/Items"
    - type: object
      properties:
        category:
          type: string
          description: Category
          enum:
          - ACTIVITY
          - START
          - END
        diagramStart:
          type: integer
          format: int32
          description: Start of the Gantt's activity
        diagramEnd:
          type: integer
          format: int32
          description: End of the Gantt's activity
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT
      required:
      - category
      - kind
  Gantt_Create:
    type: object
    description: Gantt
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        category:
          type: string
          description: Category
          enum:
          - ACTIVITY
          - START
          - END
        diagramStart:
          type: integer
          format: int32
          description: Start of the Gantt's activity
        diagramEnd:
          type: integer
          format: int32
          description: End of the Gantt's activity
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT
      required:
      - category
      - kind
  Gantt_Model:
    description: Gantt Model object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT_MODEL
        gantts:
          type: array
          description: Gantts of the model
          items:
            $ref: "#/definitions/Gantt"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Gantt_Relationship"
      required:
      - kind
  Gantt_Model_Create:
    description: Gantt Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT_MODEL
        gantts:
          type: array
          description: Gantts of the model
          items:
            $ref: "#/definitions/Gantt_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Gantt_Relationship"
      required:
      - kind
  Gantt_Relationship:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Gantt_Relationships:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationships"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Gantt_Relationship_Create:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship_Create"
    - properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Gantt_Models:
    description: Gantt Model object
    allOf:
    - $ref: "#/definitions/Elements"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT_MODEL
        gantts:
          type: array
          description: Gantts of the model
          items:
            $ref: "#/definitions/Gantts"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Gantt_Relationships"
      required:
      - kind
  Gantt_Models_Create:
    description: Gantt Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - GANTT_MODEL
        gantts:
          type: array
          description: Gantts of the model
          items:
            $ref: "#/definitions/Gantt_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Gantt_Relationship"
      required:
      - kind
  Generic_Id_Name:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
  Item:
    type: object
    description: Abstract item object
    allOf:
    - $ref: "#/definitions/Taggable"
    - type: object
      properties:
        name:
          type: string
          description: Model name
        kind:
          type: string
          description: Type of element
          enum:
          - ARCHITECTURE_MODEL
          - FLOWCHART_MODEL
          - SEQUENCE_MODEL
          - GANTT_MODEL
          - ENTITY_RELATIONSHIP_MODEL
          - UML_CLASS_MODEL
          - BPM_MODEL
          - ARCHITECTURE
          - FLOWCHART
          - SEQUENCE
          - GANTT
          - ENTITY_RELATIONSHIP
          - UML_CLASS
          - FEATURE
          - BPM
        description:
          type: string
          description: Long description of model
        location:
          $ref: "#/definitions/Point"
          description: Long description of model
        parent:
          $ref: "#/definitions/Composite_Element"
          description: Long description of model
        children:
          type: array
          description: Children of the model
          items:
            $ref: "#/definitions/Composite_Element"
        shape:
          $ref: "#/definitions/Shape"
          description: Long description of model
        canBeConnectedFrom:
          type: array
          description: Origin elements from which it is allowed to connect to this item
          items:
            $ref: "#/definitions/Connect_Trigger"
        canBeConnectedTo:
          type: array
          description: Target elements to which this item can be connected
          items:
            $ref: "#/definitions/Connect_Trigger"
        metaData:
          $ref: "#/definitions/Meta_Data"
          description: Meta data associated with the model
      discriminator: kind
  Item_Create:
    type: object
    description: Abstract item object
    allOf:
    - $ref: "#/definitions/Taggable_Create"
    - type: object
      properties:
        name:
          type: string
          description: Model name
        kind:
          type: string
          description: Type of element
          enum:
          - ARCHITECTURE_MODEL
          - FLOWCHART_MODEL
          - SEQUENCE_MODEL
          - GANTT_MODEL
          - ENTITY_RELATIONSHIP_MODEL
          - UML_CLASS_MODEL
          - BPM_MODEL
          - ARCHITECTURE
          - FLOWCHART
          - SEQUENCE
          - GANTT
          - ENTITY_RELATIONSHIP
          - UML_CLASS
          - FEATURE
          - BPM
        description:
          type: string
          description: Long description of model
        location:
          $ref: "#/definitions/Point_Create"
          description: Long description of model
        parent:
          $ref: "#/definitions/Composite_Element_Create"
          description: Long description of model
        children:
          type: array
          description: Children of the model
          items:
            $ref: "#/definitions/Composite_Element_Create"
        shape:
          $ref: "#/definitions/Shape_Create"
          description: Long description of model
        canBeConnectedFrom:
          type: array
          description: Origin elements from which it is allowed to connect to this item
          items:
            $ref: "#/definitions/Connect_Trigger_Create"
        canBeConnectedTo:
          type: array
          description: Target elements to which this item can be connected
          items:
            $ref: "#/definitions/Connect_Trigger_Create"
        metaData:
          $ref: "#/definitions/Meta_Data_Create"
          description: Meta data associated with the model
      discriminator: kind
  Items:
    type: object
    description: Abstract item object
    allOf:
    - $ref: "#/definitions/Taggable"
    - type: object
      properties:
        name:
          type: string
          description: Model name
        kind:
          type: string
          description: Type of element
          enum:
          - ARCHITECTURE_MODEL
          - FLOWCHART_MODEL
          - SEQUENCE_MODEL
          - GANTT_MODEL
          - ENTITY_RELATIONSHIP_MODEL
          - UML_CLASS_MODEL
          - BPM_MODEL
          - ARCHITECTURE
          - FLOWCHART
          - SEQUENCE
          - GANTT
          - ENTITY_RELATIONSHIP
          - UML_CLASS
          - FEATURE
          - BPM
        description:
          type: string
          description: Long description of model
        location:
          $ref: "#/definitions/Points"
          description: Long description of model
        parent:
          $ref: "#/definitions/Composite_Elements"
          description: Long description of model
        children:
          type: array
          description: Children of the model
          items:
            $ref: "#/definitions/Composite_Elements"
        shape:
          $ref: "#/definitions/Shapes"
          description: Long description of model
        metaData:
          $ref: "#/definitions/Meta_Data_List"
          description: Meta data associated with the model
      discriminator: kind
  Lane:
    description: Pool's lane
    type: object
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        activities:
          type: array
          description: Activities in the lane
          items:
            $ref: "#/definitions/Activity"
  Lanes:
    description: Pool's lane
    type: object
    allOf:
    - $ref: "#/definitions/Base_Entities"
    - type: object
      properties:
        activities:
          type: array
          description: Activities in the lane
          items:
            $ref: "#/definitions/Activities"
  Lane_Create:
    description: Pool's lane
    type: object
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
      properties:
        activities:
          type: array
          description: Activities in the lane
          items:
            $ref: "#/definitions/Activity"
  Meta_Data:
    type: object
    description: Meta Data
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        responsibles:
          type: array
          items:
            $ref: "#/definitions/Responsible"
        collaborators:
          type: array
          items:
            $ref: "#/definitions/Responsible"
        relatedWith:
          type: array
          items:
            $ref: "#/definitions/Taggable"
        usedIn:
          type: array
          items:
            $ref: "#/definitions/Taggable"
        views:
          type: array
          items:
            $ref: "#/definitions/View"
  Meta_Data_List:
    type: object
    description: Meta Data
    allOf:
    - $ref: "#/definitions/Base_Entities"
    - type: object
      properties:
        responsibles:
          type: array
          items:
            $ref: "#/definitions/Responsible"
        collaborators:
          type: array
          items:
            $ref: "#/definitions/Responsible"
        relatedWith:
          type: array
          items:
            $ref: "#/definitions/Taggable"
        usedIn:
          type: array
          items:
            $ref: "#/definitions/Taggable"
        views:
          type: array
          items:
            $ref: "#/definitions/Views"
  Meta_Data_Create:
    type: object
    description: Meta Data
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
      properties:
        responsibles:
          type: array
          items:
            $ref: "#/definitions/Responsible_Create"
        collaborators:
          type: array
          items:
            $ref: "#/definitions/Responsible_Create"
        relatedWith:
          type: array
          items:
            $ref: "#/definitions/Taggable_Create"
        usedIn:
          type: array
          items:
            $ref: "#/definitions/Taggable_Create"
        views:
          type: array
          items:
            $ref: "#/definitions/View_Create"
  Meta_Info:
    type: object
    description: Meta info for any object
    properties:
      id:
        type: string
        description: Meta info identifier
      version:
        $ref: "#/definitions/Version"
        description: Version of the object
      createdBy:
        $ref: "#/definitions/Account"
        description: Account that creates the object
      modifiedBy:
        $ref: "#/definitions/Account"
        description: Account that modifies the object
      created:
        type: string
        format: date-time
        description: Full date of creation of the object
      modified:
        type: string
        format: date-time
        description: Full date of modification of the object
    required:
    - id
    - version
    - createdBy
    - modifiedBy
  Meta_Info_List:
    type: object
    description: Meta info for any object
    properties:
      id:
        type: string
        description: Meta info identifier
      version:
        $ref: "#/definitions/Versions"
        description: Version of the object
      createdBy:
        $ref: "#/definitions/Accounts"
        description: Account that creates the object
      modifiedBy:
        $ref: "#/definitions/Accounts"
        description: Account that modifies the object
      created:
        type: string
        format: date-time
        description: Full date of creation of the object
      modified:
        type: string
        format: date-time
        description: Full date of modification of the object
    required:
    - id
    - version
    - createdBy
    - modifiedBy
  Meta_Info_Create:
    type: object
    description: Meta info for any object
    properties:
      version:
        $ref: "#/definitions/Version_Create"
        description: Version of the object
      createdBy:
        $ref: "#/definitions/Account_Create"
        description: Account that creates the object
      modifiedBy:
        $ref: "#/definitions/Account_Create"
        description: Account that modifies the object
      created:
        type: string
        format: date-time
        description: Full date of creation of the object
      modified:
        type: string
        format: date-time
        description: Full date of modification of the object
    required:
    - version
    - createdBy
  Model:
    description: Model object
    type: object
    allOf:
    - $ref: "#/definitions/Architecture_Model"
    - $ref: "#/definitions/BPM_Model"
    - $ref: "#/definitions/Flowchart_Model"
    - $ref: "#/definitions/Gantt_Model"
    - $ref: "#/definitions/Sequence_Model"
  Models:
    description: List of model objects
    type: object
    allOf:
    - $ref: "#/definitions/Architecture_Models"
    - $ref: "#/definitions/BPM_Models"
    - $ref: "#/definitions/Flowchart_Models"
    - $ref: "#/definitions/Gantt_Models"
    - $ref: "#/definitions/Sequence_Models"
  Model_Create:
    description: Model object to be created
    type: object
    allOf:
    - $ref: "#/definitions/Architecture_Model_Create"
    - $ref: "#/definitions/BPM_Model_Create"
    - $ref: "#/definitions/Flowchart_Model_Create"
    - $ref: "#/definitions/Gantt_Model_Create"
    - $ref: "#/definitions/Sequence_Model_Create"
  Models_Create:
    description: List of model objects to be created
    type: object
    allOf:
    - $ref: "#/definitions/Architecture_Models_Create"
    - $ref: "#/definitions/BPM_Models_Create"
    - $ref: "#/definitions/Flowchart_Models_Create"
    - $ref: "#/definitions/Gantt_Models_Create"
    - $ref: "#/definitions/Sequence_Models_Create"
  Model_Parent_Create:
    description: A reference to a taggable element
    type: object
    properties:
      id:
        type: string
        description: Composite element identifier
      type:
        type: string
        description: Referenced element type
        enum:
        - ARCHITECTURE_MODEL
        - FLOWCHART_MODEL
        - SEQUENCE_MODEL
        - GANTT_MODEL
        - ENTITY_RELATIONSHIP_MODEL
        - UML_CLASS_MODEL
        - BPM_MODEL
        - ARCHITECTURE
        - FLOWCHART
        - SEQUENCE
        - GANTT
        - ENTITY_RELATIONSHIP
        - UML_CLASS
        - FEATURE
        - COMPONENT
        - CONTAINER
        - DEPLOYMENT
        - BPM
  Options_Input_Item:
    type: object
    properties:
      input:
        type: object
  Options_Input_Id_Name_Item:
    type: object
    properties:
      input:
        $ref: '#/definitions/Generic_Id_Name'
  Options_Output_Item:
    type: object
    properties:
      output:
        type: object
  Options_Input_Collection_Item:
    type: object
    properties:
      output:
        type: array
        items:
          type: object
  Options_Output_Collection_Item:
    type: object
    properties:
      output:
        type: array
        items:
          type: object
  Options_Output_Collection_Id_Name_Item:
    type: object
    properties:
      output:
        type: array
        items:
          $ref: '#/definitions/Generic_Id_Name'
  Options_Get_String_Collection:
    description: Generic object to expose endpoint functionalitites
    properties:
      get:
        type: string
  Options_Get_Collection:
    description: Generic object to expose endpoint functionalitites
    properties:
      get:
        $ref: '#/definitions/Options_Output_Collection_Item'
  Options_Get_Id_Name_Collection:
    description: Generic object to expose endpoint functionalitites
    properties:
      get:
        $ref: '#/definitions/Options_Output_Collection_Id_Name_Item'
  Options_Get:
    description: Generic object to expose endpoint functionalitites
    properties:
      get:
        $ref: '#/definitions/Options_Output_Item'
  Options_Post:
    description: Generic object to expose endpoint functionalitites
    properties:
      post:
        $ref: '#/definitions/Options_Input_Item'
  Options_Post_Id_Name:
    description: Generic object to expose endpoint functionalitites
    properties:
      post:
        $ref: '#/definitions/Options_Input_Id_Name_Item'
  Options_Post_String:
    description: Generic object to expose endpoint functionalitites
    properties:
      post:
        type: string
  Options_Post_Collection:
    description: Generic object to expose endpoint functionalitites for batching input processing
    properties:
      post:
        $ref: '#/definitions/Options_Input_Collection_Item'
  Options_Put:
    description: Generic object to expose endpoint functionalitites
    properties:
      put:
        $ref: '#/definitions/Options_Input_Item'
  Options_Patch:
    description: Generic object to expose endpoint functionalitites
    properties:
      patch:
        $ref: '#/definitions/Options_Input_Item'
      head:
        $ref: '#/definitions/Options_Output_Item'
  Options_Head:
    description: Generic object to expose endpoint functionalitites
    properties:
      head:
        $ref: '#/definitions/Options_Output_Item'
  Pool:
    description: BPM's pool
    type: object
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        lanes:
          type: array
          description: Lanes in the pool
          items:
            $ref: "#/definitions/Lane"
  Pools:
    description: BPM's pool
    type: object
    allOf:
    - $ref: "#/definitions/Items"
    - type: object
      properties:
        lanes:
          type: array
          description: Lanes in the pool
          items:
            $ref: "#/definitions/Lanes"
  Pool_Create:
    description: BPM's pool
    type: object
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        lanes:
          type: array
          description: Lanes in the pool
          items:
            $ref: "#/definitions/Lane_Create"
  Point:
    type: object
    description: Coordinates on which the model is located
    properties:
      x:
        type: string
        format: double
        description: Relative x coordinate of the point on which the model is located
      y:
        type: string
        format: double
        description: Relative y coordinate of the point on which the model is located
      z:
        type: string
        format: double
        description: Relative z coordinate of the point on which the model is located
    required:
    - x
    - y
  Points:
    type: object
    description: Coordinates on which the model is located
    properties:
      x:
        type: string
        format: double
        description: Relative x coordinate of the point on which the model is located
      y:
        type: string
        format: double
        description: Relative y coordinate of the point on which the model is located
      z:
        type: string
        format: double
        description: Relative z coordinate of the point on which the model is located
    required:
    - x
    - y
  Point_Create:
    type: object
    description: Coordinates on which the model is located
    properties:
      x:
        type: string
        format: double
        description: Relative x coordinate of the point on which the model is located
      y:
        type: string
        format: double
        description: Relative y coordinate of the point on which the model is located
      z:
        type: string
        format: double
        description: Relative z coordinate of the point on which the model is located
    required:
    - x
    - y
  Person:
    description: Person
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        names:
          type: string
          description: Names of the person
        lastNames:
          type: string
          description: Lastname(s) of the person
      required:
      - names
      - lastNames
  Persons:
    description: Person
    allOf:
    - $ref: "#/definitions/Base_Entities"
    - type: object
      properties:
        names:
          type: string
          description: Names of the person
        lastNames:
          type: string
          description: Lastname(s) of the person
      required:
      - names
      - lastNames
  Person_Create:
    description: Person
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        names:
          type: string
          description: Names of the person
        lastNames:
          type: string
          description: Lastname(s) of the person
      required:
      - names
      - lastNames
  Responsible:
    description: Person that is responsible of a specific component of a model
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        organizationUnit:
          type: string
          description: Organization unit to which the responsible belongs to
        responsible:
          $ref: "#/definitions/Person"
          description: Person that is responsible of a specific component of a model
      required:
      - organizationUnit
      - responsible
  Responsibles:
    description: Person that is responsible of a specific component of a model
    allOf:
    - $ref: "#/definitions/Base_Entities"
    - type: object
      properties:
        organizationUnit:
          type: string
          description: Organization unit to which the responsible belongs to
        responsible:
          $ref: "#/definitions/Persons"
          description: Person that is responsible of a specific component of a model
      required:
      - organizationUnit
      - responsible
  Responsible_Create:
    description: Person that is responsible of a specific component of a model
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        organizationUnit:
          type: string
          description: Organization unit to which the responsible belongs to
        responsible:
          $ref: "#/definitions/Person_Create"
          description: Person that is responsible of a specific component of a model
      required:
      - organizationUnit
      - responsible
  Relationship:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Taggable"
    - type: object
      properties:
        source:
          $ref: "#/definitions/Taggable"
          description: Model acting as source of the relationship
        sourceId:
          type: string
          description: Long description of model
        destination:
          $ref: "#/definitions/Taggable"
          description: Model acting as destination of the relationship
        destinationId:
          type: string
          description: Identifier of the model acting as destination of the relationship
        description:
          type: string
          description: Long description of the relationship
        sourcePort:
          type: string
          description: Port of the model acting as source of the relationship
        destinationPort:
          type: string
          description: Port of the model acting as destination of the relationship
      required:
      - sourceId
      - destinationId
  Relationship_Create:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Taggable_Create"
    - properties:
        sourceId:
          type: string
          description: Identifier of the model acting as source of the relationship
        destinationId:
          type: string
          description: Identifier of the model acting as destination of the relationship
        description:
          type: string
          description: Long description of the relationship
        sourcePort:
          type: string
          description: Port of the model acting as source of the relationship
        destinationPort:
          type: string
          description: Port of the model acting as destination of the relationship
      required:
      - sourceId
      - destinationId
  Relationships:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Taggable"
    - type: object
      properties:
        sourceId:
          type: string
          description: Long description of model
        destinationId:
          type: string
          description: Identifier of the model acting as destination of the relationship
        description:
          type: string
          description: Long description of the relationship
        sourcePort:
          type: string
          description: Port of the model acting as source of the relationship
        destinationPort:
          type: string
          description: Port of the model acting as destination of the relationship
      required:
      - sourceId
      - destinationId
  Role:
    description: A role an account could have
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      priority:
        type: integer
  Roles:
    description: A role an account could have
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      priority:
        type: integer
  Role_Create:
    description: A role an account could have
    type: object
    properties:
      name:
        type: string
      priority:
        type: integer
  Shape:
    type: object
    description: Concrete shape that univocally identify o model
    properties:
      id:
        type: string
        description: Shape identifier
      type:
        type: string
        description: Shape type
        enum:
        - PERSON
        - ROUNDED_BOX
        - BOX
        - DIAMOND
        - CIRCLE
    required:
    - id
    - type
  Shapes:
    type: object
    description: Concrete shape that univocally identify o model
    properties:
      id:
        type: string
        description: Shape identifier
      type:
        type: string
        description: Shape type
        enum:
        - PERSON
        - ROUNDED_BOX
        - BOX
        - DIAMOND
        - CIRCLE
    required:
    - id
    - type
  Shape_Create:
    type: object
    description: Concrete shape that univocally identify o model
    properties:
      id:
        type: string
        description: Shape identifier
      type:
        type: string
        description: Shape type
        enum:
        - PERSON
        - ROUNDED_BOX
        - BOX
        - DIAMOND
        - CIRCLE
    required:
    - id
    - type
  Sequence:
    description: Sequence
    type: object
    allOf:
    - $ref: "#/definitions/Item"
    - type: object
      properties:
        start:
          type: integer
          format: int32
          description: Start of the sequence's activity
        duration:
          type: integer
          format: int32
          description: Duration of the sequence's activity
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
      required:
      - kind
  Sequences:
    type: object
    description: Sequence
    allOf:
    - $ref: "#/definitions/Items"
    - type: object
      properties:
        start:
          type: integer
          format: int32
          description: Start of the sequence's activity
        duration:
          type: integer
          format: int32
          description: Duration of the sequence's activity
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
      required:
      - kind
  Sequence_Create:
    description: Sequence
    type: object
    allOf:
    - $ref: "#/definitions/Item_Create"
    - type: object
      properties:
        start:
          type: integer
          format: int32
          description: Start of the sequence's activity
        duration:
          type: integer
          format: int32
          description: Duration of the sequence's activity
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
      required:
      - kind
  Sequence_Model:
    description: Sequence Model object
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
        sequences:
          type: array
          description: Sequences of the model
          items:
            $ref: "#/definitions/Sequence"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Sequence_Relationship"
      required:
      - kind
  Sequence_Models:
    description: Sequence Model object
    allOf:
    - $ref: "#/definitions/Elements"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
        sequences:
          type: array
          description: Sequences of the model
          items:
            $ref: "#/definitions/Sequences"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Sequence_Relationships"
      required:
      - kind
  Sequence_Model_Create:
    description: Sequence Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
        sequences:
          type: array
          description: Sequences of the model
          items:
            $ref: "#/definitions/Sequence_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Sequence_Relationship"
      required:
      - kind
  Sequence_Relationship:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Sequence_Relationships:
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationships"
    - type: object
      properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Sequence_Relationship_Create:
    type: object
    description: Relationship between model objects
    allOf:
    - $ref: "#/definitions/Relationship_Create"
    - properties:
        type:
          type: string
          description: Type of relationship
          enum:
          - UNIDIRECTIONAL
          - BIDIRECTIONAL
      required:
      - type
  Sequence_Models_Create:
    description: Sequence Model object
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          type: string
          description: Type of model
          enum:
          - SEQUENCE_MODEL
        sequences:
          type: array
          description: Sequences of the model
          items:
            $ref: "#/definitions/Sequence_Create"
        relationships:
          type: array
          items:
            $ref: "#/definitions/Sequence_Relationship"
      required:
      - kind
  Software_System:
    description: Software System
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element"
    - type: object
      properties:
        scope:
          description: Scope on which this software system is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        containers:
          description: Containers embeded in this software system
          type: array
          items:
            $ref: "#/definitions/Container"
  Software_System_Create:
    description: Software System
    type: object
    allOf:
    - $ref: "#/definitions/Static_Element_Create"
    - type: object
      properties:
        scope:
          description: Scope on which this software system is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        containers:
          description: Containers embeded in this software system
          type: array
          items:
            $ref: "#/definitions/Container_Create"
  Software_Systems:
    description: Software System
    type: object
    allOf:
    - $ref: "#/definitions/Static_Elements"
    - type: object
      properties:
        scope:
          description: Scope on which this software system is relevant
          type: string
          enum:
          - Internal
          - External
          - Unspecified
        containers:
          description: Containers embeded in this software system
          type: array
          items:
            $ref: "#/definitions/Containers"
  Static_Element:
    type: object
    description: Static element
    allOf:
    - $ref: "#/definitions/Element"
    - type: object
      properties:
        kind:
          description: Type of static element
          type: string
          enum:
          - COMPONENT
      required:
      - kind
  Static_Element_Create:
    type: object
    description: Static element
    allOf:
    - $ref: "#/definitions/Element_Create"
    - type: object
      properties:
        kind:
          description: Type of static element
          type: string
          enum:
          - COMPONENT
      required:
      - kind
  Static_Elements:
    type: object
    description: Static element
    allOf:
    - $ref: "#/definitions/Elements"
    - type: object
      properties:
        kind:
          description: Type of static element
          type: string
          enum:
          - COMPONENT
      required:
      - kind
  Taggable:
    description: Instantiable model
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        tags:
          type: array
          description: Tags of the model
          items:
            type: string
      required:
      - id
  Taggable_Create:
    description: Instantiable model
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
      properties:
        tags:
          type: array
          description: Tags of the model
          items:
            type: string
  Constraint:
    type: object
  Constraints:
    type: object
  Constraint_Create:
    type: object
  Version:
    type: object
    description: Version
    properties:
      id:
        type: string
        description: Version identifier
      major:
        type: integer
        format: int32
        description: Major part of the version
      minor:
        type: integer
        format: int32
        description: Minor part of the version
      build:
        type: integer
        format: int32
        description: Build part of the version
    required:
    - id
    - major
    - minor
    - build
  Versions:
    type: object
    description: Version
    properties:
      id:
        type: string
        description: Version identifier
      major:
        type: integer
        format: int32
        description: Major part of the version
      minor:
        type: integer
        format: int32
        description: Minor part of the version
      build:
        type: integer
        format: int32
        description: Build part of the version
    required:
    - id
    - major
    - minor
    - build
  Version_Create:
    type: object
    description: Version
    properties:
      major:
        type: integer
        format: int32
        description: Major part of the version
      minor:
        type: integer
        format: int32
        description: Minor part of the version
      build:
        type: integer
        format: int32
        description: Build part of the version
    required:
    - major
    - minor
    - build
  View:
    description: View of the model
    allOf:
    - $ref: "#/definitions/Base_Entity"
    - type: object
      properties:
        name:
          type: string
          description: Name of the view
      required:
      - name
  Views:
    description: View of the model
    allOf:
    - $ref: "#/definitions/Base_Entities"
    - type: object
      properties:
        name:
          type: string
          description: Name of the view
      required:
      - name
  View_Create:
    description: View of the model
    allOf:
    - $ref: "#/definitions/Base_Entity_Create"
    - type: object
      properties:
        name:
          type: string
          description: Name of the view
      required:
      - name