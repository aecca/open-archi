extends layout
block meta
    meta(name="description", content="OpenArchi Editor")
block scripts
    link(rel='stylesheet', type='text/css', href='/stylesheets/jquery-ui.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/autocomplete.css')
    script(src='/javascripts/go.js')
    script(type='text/javascript', src='/javascripts/jquery-ui.js')
    script(type='text/javascript', src='/javascripts/OpenArchiWrapper.js')
    script(type='text/javascript', src='/javascripts/editor.js')
    script#code(type="text/javascript")
    script.
        let myDiagram;
        let myPalette;
        let nodeDataArray;
        let linkDataArray;
        let MINLENGTH;  // this controls the minimum length of any swimlane
        let MINBREADTH;  // this controls the minimum breadth of any non-collapsed swimlane
        let HORIZONTAL;  // this constant parameter can only be set here, not dynamically
        let red;
        let green;

        $(function () {
            var showMenuFlag = !{showMenu};
            if (showMenuFlag !== undefined && showMenuFlag !== null && showMenuFlag) {
                $.getScript("/javascripts/menu.js").done(function (script, textStatus) {
                    showMenu();
                });
            }
            var dataArray;
            $("#diagramId").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.get("/open-archi/api/models", {$filter: "name=='*" + request.term + "*'"})
                        .done(function (data) {
                            var models = [{id: "-1", value: "Select one..."}];
                            dataArray = data;
                            if (Array.isArray(data)) {
                                data.forEach(function (model) {
                                    models.push({id: model.id, value: model.name});
                                });
                                response(models);
                            } else {
                                response({});
                            }
                        });
                },
                select: function (event, element) {
                    var id = element.item.id;
                    var model = dataArray.find(function (model) {
                        return model.id === id;
                    });
                    $("#modelToSaveOrLoad").html(JSON.stringify(model, null, 2));
                    openModel(model);
                },
                // optional (if other layers overlap autocomplete list)
                open: function (event, ui) {
                    $(".ui-autocomplete").css("z-index", 1000);
                }
            }).on("click", function () {
                $(this).select();
            });
        });

block content
    div(style="padding-bottom: 15px;")
        //select#diagram-types-combo
        //    option(value="NONE") Seleccione uno
        //    each diagramType in diagramTypes
        //        option(value=diagramType)= diagramType
        //select#diagram-views(onchange="switchDiagrams")
        //    option(value="DEFAULT") Default
        //    option(value="TREE") Tree
        //    option(value="ER") ER
        input#diagramId(name='diagramId', placeholder='Nombre del diagrama...')
        div(style="padding-top: 15px")
            button#SaveButton(onclick="save()") Guardar
            | &nbsp;
            button#LoadButton(onclick="load()") Cargar
            | &nbsp;
            button#OpenSVGButton(onclick="openSVG()") Exportar como SVG
    div#diagramsCanvas(style="justify-content: space-between")
        div#paletteDiv(style="width: 100px; margin-right: 2px; border: solid 0")
        div#diagramDiv(style="border: 0; width: 100%; height:400px; overflow: scroll;")
        div(style="display: inline; min-width: 300px;")
            textarea#modelToSaveOrLoad(style="width:100%;height:300px")