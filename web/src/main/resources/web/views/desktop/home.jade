//- Including Image mixins
include ../components/main

doctype html
html(lang="en")
head
    script.
        let basePath = '!{basePath}'
    meta(name = "description", content = "OpenArchi Desktop")
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="twitter:site", content="@araguacaima")
    meta(name="twitter:creator", content="@araguacaima")
    meta(name="twitter:card", content="summary")
    meta(name="twitter:title", content="OpenArchi Apis")
    meta(name="twitter:description", content="OpenArchi Apis")
    meta(name="twitter:image", content="http://www.open-archi.com/images/open-archi.png")
    meta(property="og:url", content="http://www.open-archi.com")
    meta(property="og:title", content="Metro 4 Components Library")
    meta(property="og:description", content="OpenArchi Desktop")
    meta(property="og:type", content="website")
    meta(property="og:image", content="http://www.open-archi.com/images/open-archi.png")
    meta(property="og:image:secure_url", content="https://www.open-archi.com/images/open-archi.png")
    meta(property="og:image:type", content="image/png")
    meta(property="og:image:width", content="968")
    meta(property="og:image:height", content="504")
    meta(name="author", content="Alejandro MÃ©ndez")
    meta(name="description", content="OpenArchi Desktop")
    meta(name="keywords", content="OpenArchi, Api, Desktop, Metro4, Metro 4, CSS3, Javascript, HTML5, UI, Library, Web, Development, Framework")

    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/desktop.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/metro-all.css?ver=@@b-version')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/swagger-ui.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/jquery-ui.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/autocomplete.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/menu.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/dataInspector.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/palette.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/bootstrap-slider.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/jquery.mCustomScrollbar.min.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/presenter.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/jquery.json-view.min.css')
    link(rel='stylesheet', type='text/css', href='https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/navbar-fixed-top.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/justified-nav.css')
    link(rel='stylesheet', type='text/css', href=basePath + '/stylesheets/tiny.css')
    style.
        .ui-autocomplete-loading {
            background: white url('!{basePath}/stylesheets/images/ui-anim_basic_16x16.gif') right center no-repeat;
        }
    title= title
body
    div.desktop
        div.task-bar
            div.task-bar-section
                button.task-bar-item#start-menu-toggle
                    +img-responsive-rounded("/images/open-archi-26.png", null, style="display: inherit;")
                    //span.mif-windows
                div.start-menu(data-role="dropdown", data-toggle-element="#start-menu-toggle")
                    div.start-menu-inner.h-100
                        div.explorer
                            ul.v-menu.w-100.bg-brandColor2.fg-white
                                li
                                    a(onclick="createWindowYoutube()") Youtube window
                                li
                                    a(onclick="createWindow()") New window
                                li
                                    a(onclick="createWindowModal()") Modal window
                                li
                                    a(onclick="createApiWindow()")
                                        +img-responsive-rounded("/images/open-archi-api-logo.png", null, style="display: inherit;")
                                        | APIs definition
                                li
                                    a(onclick="createPrototyperWindow()")
                                        +img-responsive-rounded("/images/open-archi-prototyper-logo.png", null, style="display: inherit;")
                                        | Prototyper
                                li
                                    a(onclick="createEditorWindow()")
                                        +img-responsive-rounded("/images/open-archi-editor-logo.png", null, style="display: inherit;")
                                        | Editor
            div.task-bar-section.tasks
        div.window-area
    script(type='text/javascript', src=basePath + '/javascripts/commons.js')
    script(type='text/javascript', src=basePath + '/javascripts/jquery.json-view.min.js')
    script(type='text/javascript', src=basePath + '/javascripts/w3color.js')
    script(type='text/javascript', src=basePath + "/javascripts/metro.js")
    script(type='text/javascript', src=basePath + "/javascripts/desktop.js")
    script(type='text/javascript', src=basePath + '/javascripts/swagger-ui-bundle.js')
    script(type='text/javascript', src=basePath + '/javascripts/swagger-ui-standalone-preset.js')
    script(type='text/javascript', src=basePath + '/javascripts/jquery-ui.js')
    script.
        $.fn.slider = null;
    script(type='text/javascript', src=basePath + '/javascripts/go.js')
    script(type='text/javascript', src=basePath + '/javascripts/underscore.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/common/openArchiCommon.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/common/openArchiToDiagram.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/common/openArchiFromDiagram.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/common/dataInspector.js')
    script(type='text/javascript', src=basePath + '/javascripts/bootstrap-slider.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/common/editor.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/common/elements.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/elements/architectureModel.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/elements/component.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/elements/container.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/elements/layer.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/elements/system.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/common/basic.js')
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/common/palette.js')
    script(type='text/javascript', src=basePath + '/javascripts/jquery.mCustomScrollbar.concat.min.js')
    script.
        meta.isPrototyper = !{prototyper};

        let nodeDataArray = [];
        let linkDataArray = [];
        let model = !{model_};
        if (!_.isEmpty(model)) {
            model = OpenArchiToDiagram.process(model);
            nodeDataArray = model.nodeDataArray;
            linkDataArray = model.linkDataArray;
        }

        let paletteModel = {
            basic: [],
            general: []
        };
        let palette = !{palette_};
        if (palette !== undefined) {
            paletteModel.basic.pushAll(OpenArchiWrapper.fixCategory(palette.basicElements));
            paletteModel.general.pushAll(OpenArchiWrapper.fixCategory(palette.generalElements));
        }

        let MINLENGTH = '!{MINLENGTH}';  // this controls the minimum length of any swimlane
        let MINBREADTH = '!{MINBREADTH}';  // this controls the minimum breadth of any non-collapsed swimlane
        let HORIZONTAL = '!{HORIZONTAL}';  // this constant parameter can only be set here, not dynamically
        let red = '!{red}';
        let green = '!{green}';
        let LinePrefix = '!{LinePrefix}';  // vertical starting point in document for all Messages and Activations
        let LineSuffix = '!{LineSuffix}';  // vertical length beyond the last message time
        let MessageSpacing = '!{MessageSpacing}';  // vertical distance between Messages at different steps
        let ActivityWidth = '!{ActivityWidth}';  // width of each vertical activity bar
        let ActivityStart = '!{ActivityStart}';  // height before start message time
        let ActivityEnd = '!{ActivityEnd}';  // height beyond end message time
        let source = '!{source}';
        let lightText = 'whitesmoke';
        let viewMode;
        var diagramTypes = !{diagramTypes_};
        var elementTypes = !{elementTypes_};
        var fullView = '!{fullView}';
    script(type='text/javascript', src=basePath + '/javascripts/diagrams/presenter.js')
    block content
        +modal-force("Prototype info", "diagram-info")(save="save")
            form#diagram-info-form
                .form-group
                    label.col-form-label(for="element-name") Name:
                    input.form-control#diagram-name(type="text")

        +modal-force("Basic element data", "basic-element-data")(save="checkAndSave", more="openMore")
            form#basic-element-form
                .form-group
                    label.col-form-label(for="element-name") Name:
                    input.form-control#element-name(type="text")
                .form-group
                    label.col-form-label Type:
                    .dropdown
                        button.btn.btn-default.dropdown-toggle#element-type(type="button", data-toggle="dropdown")
                            | Element Types
                            | &nbsp;
                        ul.dropdown-menu#elementTypesDropdown(role="menu", aria-labelledby="elementTypesDropdown")
                .form-group
                    label.col-form-label Image (Only svg is permitted):
                    .dropdown
                        input#element-image-2(type="file", name="image", accept="image/svg+xml")

        +modal("Element role", "element-role-data")
            form#element-role-form
                .form-group
                    label.col-form-label Role:
                    .dropdown
                        button.btn.btn-default.dropdown-toggle#element-role(type="button", data-toggle="dropdown")
                            | Element Roles
                            | &nbsp;
                        ul.dropdown-menu#elementRolesDropdown(role="menu", aria-labelledby="elementRolesDropdown")

        +modal("Element types", "element-types-data")
            form#element-types-form
                .form-group
                    label.col-form-label Element type:
                    .dropdown
                        button.btn.btn-default.dropdown-toggle#element-type_(type="button", data-toggle="dropdown")
                            | Element Roles
                            | &nbsp;
                        ul.dropdown-menu#elementTypesDropdown_(role="menu", aria-labelledby="elementTypesDropdown")

        +modal("Model Validation", "model-validation")
            h4 The entire JSON Model will be passed the to the Rules as a Service that use a Drools' Desition Table based model's validation implementation
            p [Later it could be a Cucumber based Test set]
            +list-group-custom
                +list-group-item("#")
                    Validation issue #1
                +list-group-item("#")
                    Validation issue #2

        +modal("Element image", "element-image-data")
            form#element-image-form
                .form-group
                    label.col-form-label Image (Only svg is permitted):
                    .dropdown
                        input#element-image(type="file", name="image", accept="image/svg+xml")