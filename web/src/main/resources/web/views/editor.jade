extends layout
block meta
    meta(name="description", content="OpenArchi Editor")
block scripts
    link(rel='stylesheet', type='text/css', href='/stylesheets/jquery-ui.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/autocomplete.css')
    script(src='/javascripts/go.js')
    script(type='text/javascript', src='/javascripts/jquery-ui.js')
    script(type='text/javascript', src='/javascripts/editor.js')
    script#code(type="text/javascript")
    script.
        let myDiagram;
        let MINLENGTH;  // this controls the minimum length of any swimlane
        let MINBREADTH;  // this controls the minimum breadth of any non-collapsed swimlane
        let HORIZONTAL;  // this constant parameter can only be set here, not dynamically
        let red;
        let green;

        $(function () {
            var showMenuFlag = !{showMenu};
            if (showMenuFlag !== undefined && showMenuFlag !== null && showMenuFlag) {
                $.getScript("/javascripts/menu.js").done(function (script, textStatus) {
                    showMenu();
                });
            }

            const nodeDataArray = [
                {key: 1, text: "Alpha", color: "lightblue"},
                {key: 2, text: "Beta", color: "orange"},
                {key: 3, text: "Gamma", color: "lightgreen", group: 5},
                {key: 4, text: "Delta", color: "pink", group: 5},
                {key: 5, text: "Epsilon", color: "green", isGroup: true}
            ];
            const linkDataArray = [
                {from: 1, to: 2, color: "blue"},
                {from: 2, to: 2},
                {from: 3, to: 4, color: "green"},
                {from: 3, to: 1, color: "purple"}
            ];
            var dataArray;
            $("#diagramId").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.get("/open-archi/api/models", {$filter: "name=='*" + request.term + "*'"})
                        .done(function (data) {
                            var models = [{id: "-1", value: "Select one..."}];
                            dataArray = data;
                            if (Array.isArray(data)) {
                                data.forEach(function (model) {
                                    models.push({id: model.id, value: model.name});
                                });
                                response(models);
                            } else {
                                response({});
                            }
                        });
                },
                select: function (event, element) {
                    var id = element.item.id;
                    var model = dataArray.find(function (model) {
                        return model.id === id;
                    });
                    $("#modelToSaveOrLoad").html(JSON.stringify(model));
                    if (!openModel(model.kind)) {
                        initEditor(nodeDataArray, linkDataArray);
                    }
                },
                // optional (if other layers overlap autocomplete list)
                open: function (event, ui) {
                    $(".ui-autocomplete").css("z-index", 1000);
                }
            }).on("click", function () {
                $(this).select();
            });
        });

        function openContent(element) {
            const url = element.getAttribute("resource");
            openUrlContent(url);
        }

        function openUrlContent(url) {
            $.ajax({
                url: url,
                beforeSend: function (xhr) {
                    xhr.overrideMimeType("text/html; charset=utf-8");
                }
            }).done(function (data) {
                $("#diagramsCanvas").html(data);
            });
        }

        function openModel(type) {
            switch (type) {
                case "FLOWCHART_MODEL":
                    openUrlContent("/diagrams/flowchart.html");
                    return true;
                    break;
                case "SEQUENCE_MODEL":
                    openUrlContent("/diagrams/sequenceDiagram.html");
                    return true;
                    break;
                case "GANTT_MODEL":
                    openUrlContent("/diagrams/gantt.html");
                    return true;
                    break;
                case "ENTITY_RELATIONSHIP_MODEL":
                    openUrlContent("/diagrams/entityRelationship.html");
                    return true;
                    break;
                case "UML_CLASS_MODEL":
                    openUrlContent("/diagrams/umlClass.html");
                    return true;
                    break;
                case "BPM_MODEL":
                    openUrlContent("/diagrams/swimLanes.html");
                    return true;
                    break;
                case "ARCHITECTURE_MODEL":
                default:
                    console.log("stil not implemented");
                    return false;
            }
        }
block content
    div(style="padding-bottom: 15px;")
        //select#diagram-types-combo
        //    option(value="NONE") Seleccione uno
        //    each diagramType in diagramTypes
        //        option(value=diagramType)= diagramType
        //select#diagram-views(onchange="switchDiagrams")
        //    option(value="DEFAULT") Default
        //    option(value="TREE") Tree
        //    option(value="ER") ER
        input#diagramId(name='diagramId', placeholder='Nombre del diagrama...')
    div#diagramsCanvas
        div#diagramDiv(style="border: 0; width: 100%; height:400px; overflow: scroll;")
        div(style="padding-bottom: 15px; padding-top: 15px")
            button#SaveButton(onclick="save()") Guardar
            | &nbsp;
            button#LoadButton(onclick="load()") Cargar
        div(style="display: inline")
            textarea#modelToSaveOrLoad(style="width:100%;height:300px")