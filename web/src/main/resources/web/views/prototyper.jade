extends layout

block meta
    meta(name="description", content="OpenArchi Editor")

append styles
    link(rel='stylesheet', type='text/css', href='/stylesheets/jquery-ui.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/autocomplete.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/menu.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/dataInspector.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/palette.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/bootstrap-slider.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/jquery.mCustomScrollbar.min.css')
    style.

        /*
        One simple way of making a div fill its space,
        with allowances for the title (top) and the resize handle (bottom)
        */
        #dataModelContainer {
            position: absolute;
            bottom: 14px;
            left: 0px;
            right: 0px;
            top: 14px;
        }

        /*
            DEMO STYLE
        */
        @import "https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700";

        .navbar-btn {
            box-shadow: none;
            outline: none !important;
            border: none;
        }

        .line {
            width: 100%;
            height: 1px;
            border-bottom: 1px dashed #ddd;
            margin: 40px 0;
        }

        /* ---------------------------------------------------
            SIDEBAR STYLE
        ----------------------------------------------------- */
        #sidebar {
            width: 164px;
            position: fixed;
            top: 56px;
            left: -164px;
            height: 100vh;
            z-index: 999;
            /*background: #7386D5;*/
            background: white;
            color: #fff;
            transition: all 0.3s;
            overflow-y: scroll;
        }

        #sidebar.active {
            left: 0;
        }

        #dismiss {
            width: 35px;
            height: 35px;
            line-height: 35px;
            text-align: center;
            background: #7386D5;
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            -webkit-transition: all 0.3s;
            -o-transition: all 0.3s;
            transition: all 0.3s;
        }

        #dismiss:hover {
            background: #fff;
            color: #7386D5;
        }

        .overlay {
            position: fixed;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.7);
            z-index: 998;
            display: none;
        }

        #sidebar .sidebar-header {
            padding: 3px;
            background: buttonface;
            color: black;
            text-align: center;
        }

        #sidebar ul.components {
            padding: 0;
            border-bottom: 1px solid grey;
        }

        #sidebar ul p {
            color: #fff;
            padding: 10px;
        }

        #sidebar ul li a {
            padding: 10px;
            font-size: 1.1em;
            display: block;
        }

        #sidebar ul li a:hover {
            color: white;
            background: grey;
        }

        #sidebar ul li.active > a, a[aria-expanded="true"] {
            color: white;
            background: grey;
        }

        a[data-toggle="collapse"] {
            position: relative;
        }

        a[aria-expanded="false"]::before, a[aria-expanded="true"]::before {
            content: '\e259';
            display: contents;
            font-family: 'Glyphicons Halflings';
        }

        a[aria-expanded="true"]::before {
            content: '\e260';
        }

        ul ul a {
            font-size: 0.9em !important;
            padding-left: 30px !important;
        }

        ul.CTAs {
            padding: 20px;
        }

        ul.CTAs a {
            text-align: center;
            font-size: 0.9em !important;
            display: block;
            border-radius: 5px;
            margin-bottom: 5px;
        }

        a.download {
            background: #fff;
            color: #7386D5;
        }

        a.article, a.article:hover {
            background: #6d7fcc !important;
            color: #fff !important;
        }

        /* ---------------------------------------------------
            CONTENT STYLE
        ----------------------------------------------------- */
        #content {
            width: 100%;
            padding: 20px;
            min-height: 100vh;
            transition: all 0.3s;
            position: absolute;
            top: 0;
            right: 0;
        }

append scripts
    script(type='text/javascript', src='/javascripts/jquery-ui.js')
    script.
        $.fn.slider = null;
    script(src='/javascripts/go.js')
    script(type='text/javascript', src='/javascripts/underscore.js')
    script(type='text/javascript', src='/javascripts/diagrams/common/openArchiCommon.js')
    script(type='text/javascript', src='/javascripts/diagrams/common/openArchiToDiagram.js')
    script(type='text/javascript', src='/javascripts/diagrams/common/openArchiFromDiagram.js')
    script(type='text/javascript', src='/javascripts/diagrams/common/dataInspector.js')
    script(type='text/javascript', src='/javascripts/bootstrap-slider.js')
    script(type='text/javascript', src='/javascripts/diagrams/common/editor.js')
    script(type='text/javascript', src='/javascripts/diagrams/common/elements.js')
    script(type='text/javascript', src='/javascripts/diagrams/elements/architectureModel.js')
    script(type='text/javascript', src='/javascripts/diagrams/elements/component.js')
    script(type='text/javascript', src='/javascripts/diagrams/elements/container.js')
    script(type='text/javascript', src='/javascripts/diagrams/elements/layer.js')
    script(type='text/javascript', src='/javascripts/diagrams/elements/system.js')
    script(type='text/javascript', src='/javascripts/diagrams/common/basic.js')
    script(type='text/javascript', src='/javascripts/diagrams/common/palette.js')
    script(type='text/javascript', src='/javascripts/jquery.mCustomScrollbar.concat.min.js')
    script#code(type="text/javascript")
    script.
        let myDiagram;
        let myPaletteBasic;
        let myPaletteGeneral;
        meta.isPrototyper = !{prototyper};
        let nodeDataArray = [];
        if (!{nodeDataArray_} !== undefined) {
            nodeDataArray = !{nodeDataArray_};
        }
        let paletteModel = {
            basic: [],
            general: []
        };
        let palette = !{palette_};
        if (palette !== undefined) {
            paletteModel.basic.pushAll(OpenArchiWrapper.fixCategory(palette.basicElements));
            paletteModel.general.pushAll(OpenArchiWrapper.fixCategory(palette.generalElements));
        }
        let linkDataArray = [];
        if (!{linkDataArray_} !== undefined) {
            linkDataArray = !{linkDataArray_};
        }
        let MINLENGTH = '!{MINLENGTH}';  // this controls the minimum length of any swimlane
        let MINBREADTH = '!{MINBREADTH}';  // this controls the minimum breadth of any non-collapsed swimlane
        let HORIZONTAL = '!{HORIZONTAL}';  // this constant parameter can only be set here, not dynamically
        let red = '!{red}';
        let green = '!{green}';
        let LinePrefix = '!{LinePrefix}';  // vertical starting point in document for all Messages and Activations
        let LineSuffix = '!{LineSuffix}';  // vertical length beyond the last message time
        let MessageSpacing = '!{MessageSpacing}';  // vertical distance between Messages at different steps
        let ActivityWidth = '!{ActivityWidth}';  // width of each vertical activity bar
        let ActivityStart = '!{ActivityStart}';  // height before start message time
        let ActivityEnd = '!{ActivityEnd}';  // height beyond end message time
        let source = '!{source}';
        let lightText = 'whitesmoke';
        let viewMode;
        var diagramTypes = !{diagramTypes_};
        var elementTypes = !{elementTypes_};
        var fullView = '!{fullView}';
        $(function () {
            if (fullView) {
                $("#infoDraggable").show();
                $("#controlsDraggable").show();
                $("#dataModelDraggable").show();
            } else {
                $("#infoDraggable").hide();
                $("#controlsDraggable").hide();
                $("#dataModelDraggable").hide();
            }
            init();
            var items = [];
            var i = 0;
            var activeText;
            for (var type in diagramTypes) {
                var active = diagramTypes[type];
                if (active) {
                    items.push('<li role="presentation"><a role="menuitem" tabindex="' + i + '" href="/editor?type=' + type + '" class="active">' + type + '</a></li>');
                    activeText = type;
                } else {
                    items.push('<li role="presentation"><a role="menuitem" tabindex="' + i + '" href="/editor?type=' + type + '">' + type + '</a></li>');
                }
                i++;
            }
            var $diagramTypesDropdown = $("#diagramTypesDropdown");
            $diagramTypesDropdown.append(items.join(''));
            $diagramTypesDropdown.on('click', 'a', function () {
                var text = $(this).html();
                var htmlText = text;
                $(this).closest('.dropdown').find('.dropdown-toggle').html(htmlText);
            });

            var elementTypeItems = [];
            i = 0;
            elementTypes.forEach(function (elementType, i) {
                elementTypeItems.push('<li role="presentation" data-isGroup="' + elementType.group + '"><a role="menuitem" tabindex="' + i + '" href="#">' + elementType.type + '</a></li>');
            });
            var elementTypesDropdown = $("#elementTypesDropdown");
            elementTypesDropdown.append(elementTypeItems.join(''));
            elementTypesDropdown.on('click', 'a', function () {
                var text = $(this).html();
                var htmlText = text;
                $(this).closest('.dropdown').find('.dropdown-toggle').html(htmlText);
            });
            if ($("#viewMode").length > 0) {
                viewMode = new Slider("#viewMode", {
                    id: "viewMode",
                    ticks: [1, 2, 3],
                    ticks_labels: ['Compact', 'Moderated', 'Full'],
                    tooltip: "hide",
                    min: 1,
                    max: 3,
                    step: 1,
                    value: 3
                });
                viewMode.on('slideStop', reexpand);
            }
            var $element1 = $("#element-image");
            $element1.on("change", handleImageSelect);
            var $element2 = $("#element-image-2");
            $element2.on("change", handleImageSelect);

            $("#sidebar").mCustomScrollbar({
                theme: "minimal"
            });

            $('#sidebarCollapse').on('click', function () {
                const $sidebar = $('#sidebar');
                if (!$sidebar.hasClass('active')) {
                    $sidebar.addClass('active');
                    $('.collapse.in').toggleClass('in');
                    $('a[aria-expanded=true]').attr('aria-expanded', 'false');
                } else {
                    $sidebar.removeClass('active');
                }
            });
        });

block extra-menu-elements
    +nav_item_dropdown("#", null, "diagramTypesDropdown")(label="Diagram Type")
    +nav_item_dropdown("#")(label="Menu")
        +nav_item("/editor") New
        +nav_item("#")(onclick="validateModel()", id="ValidateModel") Validate
        +nav_item("#")(onclick="confirmAndSave()", id="SaveButton") Save
        +nav_item("#")(onclick="load()", id="LoadButton") Load
        +nav_item("#")(onclick="openSVG()", id="OpenSVGButton") Export as SVG
    if examples
        +nav_item_dropdown("#", null, "sectionsExamples")(label="Examples")
            each example in examples
                +nav_item("#")(onclick="openExample('" + example.url + "', 'myExamples');", resource=example.url)= example.name
    +nav_item("#")
        input#diagramId(name='diagramId', placeholder='Template name...')

block content
    +modal-force("Prorotype info", "diagram-info")(save="save")
        form#diagram-info-form
            .form-group
                label.col-form-label(for="element-name") Name:
                input.form-control#diagram-name(type="text")
    +modal-force("Basic element data", "basic-element-data")(save="checkAndSave", more="openMore")
        form#basic-element-form
            .form-group
                label.col-form-label(for="element-name") Name:
                input.form-control#element-name(type="text")
            .form-group
                label.col-form-label Type:
                .dropdown
                    button.btn.btn-default.dropdown-toggle#element-type(type="button", data-toggle="dropdown")
                        | Element Types
                        | &nbsp;
                    ul.dropdown-menu#elementTypesDropdown(role="menu", aria-labelledby="elementTypesDropdown")
            .form-group
                label.col-form-label Image (Only svg is permitted):
                .dropdown
                    input#element-image-2(type="file", name="image", accept="image/svg+xml")
    +modal("Element role", "element-role-data")
        form#element-role-form
            .form-group
                label.col-form-label Role:
                .dropdown
                    button.btn.btn-default.dropdown-toggle#element-role(type="button", data-toggle="dropdown")
                        | Element Roles
                        | &nbsp;
                    ul.dropdown-menu#elementRolesDropdown(role="menu", aria-labelledby="elementRolesDropdown")
    +modal("Element types", "element-types-data")
        form#element-types-form
            .form-group
                label.col-form-label Element type:
                .dropdown
                    button.btn.btn-default.dropdown-toggle#element-type_(type="button", data-toggle="dropdown")
                        | Element Roles
                        | &nbsp;
                    ul.dropdown-menu#elementTypesDropdown_(role="menu", aria-labelledby="elementTypesDropdown")
    +modal("Model Validation", "model-validation")
        h4 The entire JSON Model will be passed the to the Rules as a Service that use a Drools' Desition Table based model's validation implementation
        p [Later it could be a Cucumber based Test set]
        +list-group-custom
            +list-group-item("#")
                Validation issue #1
            +list-group-item("#")
                Validation issue #2
    +modal("Element image", "element-image-data")
        form#element-image-form
            .form-group
                label.col-form-label Image (Only svg is permitted):
                .dropdown
                    input#element-image(type="file", name="image", accept="image/svg+xml")

    // Sidebar Holder
    .wrapper
        nav#sidebar
            .sidebar-header
                h4 Palette
            ul.list-unstyled.components
                li.active
                    a(href="#basicPaletteSubMenu", data-toggle="collapse", aria-expanded="false") Basic
                    ul#basicPaletteSubMenu.collapse.list-unstyled
                        div#paletteContainerBasic
                            div#paletteDivBasic
                li
                    a(href="#generalPaletteSubMenu", data-toggle="collapse", aria-expanded="false") Extended
                    ul#generalPaletteSubMenu.collapse.list-unstyled
                        div#paletteContainerGeneral
                            div#paletteDivGeneral
        #content
            // Page Content Holder
            #diagramDiv
                #diagramsCanvas.container(style="justify-content: space-between")
                #myExamples
            #infoDraggable.draggable(style="display: none; vertical-align: top; top: 20px; left: 380px; position: relative")
                #infoDraggableHandle.handle
                    | Info
                div
                    #myInfo
            #controlsDraggable.draggable(style="display: none; vertical-align: top; top: 20px; left: 380px; position: relative; width: 380px; padding-bottom: 10px;")
                #controlsDraggableHandle.handle
                    | Controls
                div
                    #myControls(style= "margin-top: 10px;")
                        .col-sm-4
                            b View Mode:
                        .col-sm-4.text-right
                            input#viewMode(type="text")
            br
            #dataModelDraggable.container-fluid.draggable(style="height: 100px; width: 400px; display: none")
                #dataModelDraggableHandle.handle
                    | Model
                #dataModelContainer
                    span#modelToSaveOrLoad(style="display: block")
