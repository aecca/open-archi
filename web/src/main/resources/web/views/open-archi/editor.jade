extends layout

block meta
    meta(name="description", content="OpenArchi Editor")

append styles
    link(rel='stylesheet', type='text/css', href='/stylesheets/jquery-ui.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/autocomplete.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/menu.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/dataInspector.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/palette.css')
    style.

        /*
        One simple way of making a div fill its space,
        with allowances for the title (top) and the resize handle (bottom)
        */
        #dataModelContainer {
            position: absolute;
            bottom: 14px;
            left: 0px;
            right: 0px;
            top: 14px;
        }

        .innerEditor {
            height: 100%;
            margin: 0;
            min-height: 100%; /*for mozilla*/
        }

        html > body > div .innerEditor {
            height: auto;
        }


append scripts
    script(type='text/javascript', src='/javascripts/jquery-ui.js')
    script(src='/javascripts/go.js')
    script(type='text/javascript', src='/javascripts/OpenArchiWrapper.js')
    script(type='text/javascript', src='/javascripts/editor.js')
    script(type='text/javascript', src='/javascripts/diagrams/dataInspector.js')
    script#code(type="text/javascript")
    script.
        let myDiagram;
        let myPalette;
        let nodeDataArray = '!{nodeDataArray}';
        let linkDataArray = '!{linkDataArray}';
        let MINLENGTH = '!{MINLENGTH}';  // this controls the minimum length of any swimlane
        let MINBREADTH = '!{MINBREADTH}';  // this controls the minimum breadth of any non-collapsed swimlane
        let HORIZONTAL = '!{HORIZONTAL}';  // this constant parameter can only be set here, not dynamically
        let red = '!{red}';
        let green = '!{green}';
        let LinePrefix = '!{LinePrefix}';  // vertical starting point in document for all Messages and Activations
        let LineSuffix = '!{LineSuffix}';  // vertical length beyond the last message time
        let MessageSpacing = '!{MessageSpacing}';  // vertical distance between Messages at different steps
        let ActivityWidth = '!{ActivityWidth}';  // width of each vertical activity bar
        let ActivityStart = '!{ActivityStart}';  // height before start message time
        let ActivityEnd = '!{ActivityEnd}';  // height beyond end message time
        let source = '!{source}';
        let paletteData = !{palette};
        let lightText = 'whitesmoke';

        $(function () {

            $.getScript("/javascripts/menu.js").done(function (script, textStatus) {
                showMenu();
            });

            var diagramDiv = $("#diagramDiv");
            var $menu = $("#menu");
            var windowWidth = $(window).width();
            var menuWidth = $menu.width();
            var width;
            if (windowWidth === menuWidth) {
                width = windowWidth;
            } else {
                width = windowWidth - menuWidth;
            }
            var windowHeight = $(window).height();
            var menuHeight = $menu.height();
            var height;
            if (windowHeight === menuHeight) {
                height = windowHeight;
            } else {
                height = windowHeight - menuHeight;
            }
            diagramDiv.width(width);
            diagramDiv.height(height);

            $.getScript("/javascripts/diagrams/palette.js").done(function (script, textStatus) {
                showPaletteByType(paletteData);
                switch (source) {
                    case "basic":
                        $.getScript("/javascripts/diagrams/basic.js").done(function (script, textStatus) {
                            initBasic(nodeDataArray, linkDataArray);

                            myDiagram.requestUpdate();
                            // when the document is modified, add a "*" to the title and enable the "Save" button
                            myDiagram.addDiagramListener("Modified", function (e) {
                                let button = $("#SaveButton");
                                button.attr('disabled', !myDiagram.isModified);
                                let idx = document.title.indexOf("*");
                                if (myDiagram.isModified) {
                                    if (idx < 0) document.title += "*";
                                } else {
                                    if (idx >= 0) document.title = document.title.substr(0, idx);
                                }
                            });

                            $("#paletteDraggable").draggable({handle: "#paletteDraggableHandle"}).resizable({
                                // After resizing, perform another layout to fit everything in the palette's viewport
                                stop: function () {
                                    myPalette.layoutDiagram(true);
                                }
                            });

                            $("#infoDraggable").draggable({handle: "#infoDraggableHandle"});

                            new Inspector('myInfo', myDiagram,
                                {
                                    properties: {
                                        // key would be automatically added for nodes, but we want to declare it read-only also:
                                        "key": {readOnly: true, show: Inspector.showIfPresent},
                                        // fill and stroke would be automatically added for nodes, but we want to declare it a color also:
                                        "fill": {show: Inspector.showIfPresent, type: 'color'},
                                        "stroke": {show: Inspector.showIfPresent, type: 'color'}
                                    }
                                });

                        });
                        break;
                    default:
                        console.log("Still not implemented");
                }
            });

            var dataArray;
            $("#diagramId").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.get("/open-archi/api/models", {$filter: "name=='*" + request.term + "*'"})
                        .done(function (data) {
                            var models = [{id: "-1", value: "Select one..."}];
                            dataArray = data;
                            if (Array.isArray(data)) {
                                data.forEach(function (model) {
                                    models.push({id: model.id, value: model.name});
                                });
                                response(models);
                            } else {
                                response({});
                            }
                        });
                },
                select: function (event, element) {
                    var id = element.item.id;
                    var model = dataArray.find(function (model) {
                        return model.id === id;
                    });
                    $("#modelToSaveOrLoad").html(JSON.stringify(model, null, 2));
                    openModel(model);
                },
                // optional (if other layers overlap autocomplete list)
                open: function (event, ui) {
                    $(".ui-autocomplete").css("z-index", 1000);
                }
            }).on("click", function () {
                $(this).select();
            });

            $("#dataModelDraggable").draggable({handle: "#dataModelDraggableHandle"}).resizable({
                stop: function (event, ui) {
                    var $modelToSaveOrLoad = $("#modelToSaveOrLoad");
                    $modelToSaveOrLoad.width(ui.size.width - 16);
                    $modelToSaveOrLoad.height(ui.size.height - 22);
                }
            });
        });

block extra-menu-elements
    +nav_item_dropdown("#")(label="Edit")
        +nav_item("#")(onclick="save()", id="SaveButton") Save
        +nav_item("#")(onclick="load()", id="LoadButton") Load
        +nav_item("#")(onclick="openSVG()", id="OpenSVGButton") Export as SVG
    if examples
        +nav_item_dropdown("#", null, "sectionsExamples")(label="Examples")
            each example in examples
                +nav_item("#")(onclick="openContent('" + example.url + "');", resource=example.url)= example.name
    +nav_item("#")
        input#diagramId(name='diagramId', placeholder='Template name...')

block content
    #diagramDiv
    #diagramsCanvas.container(style="justify-content: space-between")
        if explanation
            #explanation
                h2#mainTitle(style="margin-top: 0; padding-top: 0; margin-bottom: 30px;")= mainTitle
                h2#caption(style="margin-top: 0; padding-top: 0; margin-bottom: 30px; color: red; text-align: right;")= caption
                p= fullDescription
                if steps
                    ul
                        each step in steps
                            li= step
                if mainTitle
                    strong Como todos lo demás elementos, se pueden combinar éstas caractrísticas con las presentes en otros ejemplos para crear capacidades más complejas
    div.draggable#paletteDraggable(style="height: 300px; position: relative")
        div.handle#paletteDraggableHandle
            | Palette
        div#paletteContainer
            div#paletteDiv
    div.draggable#infoDraggable(style="display: inline-block; vertical-align: top; padding: 5px; top: 20px; left: 380px; position: relative")
        div.handle#infoDraggableHandle
            | Info
        div
            div#myInfo
    //#diagramDiv.innerEditor
    if nodeDataArray
        div
            p Aquí se pueden visualizar los datos que permiten almacenar y/o recuperar el diagrama expuesto arriba (Utilizando las APIs definidas en: /open-archi/api), en formato JSON y en tiempo real
    br
    div.container-fluid.draggable#dataModelDraggable(style="height: 200px; width: 100%; position: relative")
        div.handle#dataModelDraggableHandle
            | Model
        div#dataModelContainer
            textarea#modelToSaveOrLoad(style="width: 100%; height: 200px")
