extends layout

block meta
    meta(name="description", content="OpenArchi Editor")

append styles
    link(rel='stylesheet', type='text/css', href='/stylesheets/jquery-ui.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/autocomplete.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/menu.css')

append scripts
    script(type='text/javascript', src='/javascripts/jquery-ui.js')
    script(src='/javascripts/go.js')
    script(type='text/javascript', src='/javascripts/OpenArchiWrapper.js')
    script(type='text/javascript', src='/javascripts/editor.js')
    script#code(type="text/javascript")
    script.
        let myDiagram;
        let myPalette;
        let nodeDataArray = '!{nodeDataArray}';
        let linkDataArray = '!{linkDataArray}';
        let MINLENGTH = '!{MINLENGTH}';  // this controls the minimum length of any swimlane
        let MINBREADTH = '!{MINBREADTH}';  // this controls the minimum breadth of any non-collapsed swimlane
        let HORIZONTAL = '!{HORIZONTAL}';  // this constant parameter can only be set here, not dynamically
        let red = '!{red}';
        let green = '!{green}';
        let LinePrefix = '!{LinePrefix}';  // vertical starting point in document for all Messages and Activations
        let LineSuffix = '!{LineSuffix}';  // vertical length beyond the last message time
        let MessageSpacing = '!{MessageSpacing}';  // vertical distance between Messages at different steps
        let ActivityWidth = '!{ActivityWidth}';  // width of each vertical activity bar
        let ActivityStart = '!{ActivityStart}';  // height before start message time
        let ActivityEnd = '!{ActivityEnd}';  // height beyond end message time
        let source = '!{source}';
        let paletteData = !{palette};
        let lightText = 'whitesmoke';

        $(function () {

            $.getScript("/javascripts/menu.js").done(function (script, textStatus) {
                showMenu();
            });

            $.getScript("/javascripts/diagrams/palette.js").done(function (script, textStatus) {
                showPaletteByType(paletteData);
                switch (source) {
                    case "basic":
                        $.getScript("/javascripts/diagrams/basic.js").done(function (script, textStatus) {
                            initBasic(nodeDataArray, linkDataArray);
                            // when the document is modified, add a "*" to the title and enable the "Save" button
                            myDiagram.addDiagramListener("Modified", function (e) {
                                let button = $("#SaveButton");
                                button.attr('disabled', !myDiagram.isModified);
                                let idx = document.title.indexOf("*");
                                if (myDiagram.isModified) {
                                    if (idx < 0) document.title += "*";
                                } else {
                                    if (idx >= 0) document.title = document.title.substr(0, idx);
                                }
                            });
                        });
                        break;
                    default:
                        console.log("Still not implemented");
                }
            });

            var dataArray;
            $("#diagramId").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.get("/open-archi/api/models", {$filter: "name=='*" + request.term + "*'"})
                        .done(function (data) {
                            var models = [{id: "-1", value: "Select one..."}];
                            dataArray = data;
                            if (Array.isArray(data)) {
                                data.forEach(function (model) {
                                    models.push({id: model.id, value: model.name});
                                });
                                response(models);
                            } else {
                                response({});
                            }
                        });
                },
                select: function (event, element) {
                    var id = element.item.id;
                    var model = dataArray.find(function (model) {
                        return model.id === id;
                    });
                    $("#modelToSaveOrLoad").html(JSON.stringify(model, null, 2));
                    openModel(model);
                },
                // optional (if other layers overlap autocomplete list)
                open: function (event, ui) {
                    $(".ui-autocomplete").css("z-index", 1000);
                }
            }).on("click", function () {
                $(this).select();
            });
            //            var menu = $('#cssmenu');
            //            var menuList = menu.find('ul:first');
            //            var listItems = menu.find('li').not('#responsive-tab');
            //
            //            // Create responsive trigger
            //            menuList.prepend('<li id="responsive-tab"><a href="#">Menu</a></li>');
            //
            //            // Toggle menu visibility
            //            menu.on('click', '#responsive-tab', function () {
            //                listItems.slideToggle('fast');
            //                listItems.addClass('collapsed');
            //            });
        });

block content
    .container
        block menu-element
            +nav_image_item("/open-archi", "/images/open-archi.png", "Open-Archi", null, "padding-top: 0; padding-bottom: 0;")(width='80', height='50')
            +nav_item_dropdown("#")(label="Edit")
                +nav_item("#")(onclick="save()", id="SaveButton") Save
                +nav_item("#")(onclick="load()", id="LoadButton") Load
                +nav_item("#")(onclick="openSVG()", id="OpenSVGButton") Export as SVG
            if examples
                +nav_item_dropdown("#", null, "sectionsExamples")(label="Examples")
                    each example in examples
                        +nav_item("#")(onclick="openContent('" + example.url + "');", resource=example.url)= example.name
            li
                input#diagramId(name='diagramId', placeholder='Template name...')
    .container
        h2.title= title
        #diagramsCanvas(style="justify-content: space-between")
            if explanation
                div#explanation
                    h2#mainTitle(style="margin-top: 0; padding-top: 0; margin-bottom: 30px;")= mainTitle
                    h2#caption(style="margin-top: 0; padding-top: 0; margin-bottom: 30px; color: red; text-align: right;")= caption
                    p= fullDescription
                    if steps
                        ul
                            each step in steps
                                li= step
                    if mainTitle
                        strong Como todos lo demás elementos, se pueden combinar éstas caractrísticas con las presentes en otros ejemplos para crear capacidades más complejas
            div(style="width: 100%; display: flex;")
                div#paletteDiv(style="width: 15%; height:400px; border: solid gray 1px; overflow: scroll; margin-right: 2px; ")
                div#diagramDiv(style="width: 85%; height:400px; border: solid gray 1px; overflow: scroll; margin-right: 2px; ")
            if nodeDataArray
                div
                    p Aquí se pueden visualizar los datos que permiten almacenar y/o recuperar el diagrama expuesto arriba (Utilizando las APIs definidas en: /open-archi/api), en formato JSON y en tiempo real
            br
            div(style="display: inline; min-width: 300px;")
                textarea#modelToSaveOrLoad(style="width:100%;height:300px")