extends layout

block meta
    meta(name="description", content="OpenArchi Editor")

append styles
    link(rel='stylesheet', type='text/css', href='/stylesheets/jquery-ui.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/autocomplete.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/menu.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/dataInspector.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/palette.css')
    style.

        /*
        One simple way of making a div fill its space,
        with allowances for the title (top) and the resize handle (bottom)
        */
        #dataModelContainer {
            position: absolute;
            bottom: 14px;
            left: 0px;
            right: 0px;
            top: 14px;
        }

append scripts
    script(type='text/javascript', src='/javascripts/jquery-ui.js')
    script(src='/javascripts/go.js')
    script(type='text/javascript', src='/javascripts/OpenArchiWrapper.js')
    script(type='text/javascript', src='/javascripts/diagrams/dataInspector.js')
    script#code(type="text/javascript")
    script.
        let myDiagram;
        let myPalette;
        let nodeDataArray = [];
        if (!{nodeDataArray}) {
            nodeDataArray = !{nodeDataArray};
        }
        let linkDataArray = [];
        if (!{linkDataArray}) {
            linkDataArray = !{linkDataArray};
        }
        let MINLENGTH = '!{MINLENGTH}';  // this controls the minimum length of any swimlane
        let MINBREADTH = '!{MINBREADTH}';  // this controls the minimum breadth of any non-collapsed swimlane
        let HORIZONTAL = '!{HORIZONTAL}';  // this constant parameter can only be set here, not dynamically
        let red = '!{red}';
        let green = '!{green}';
        let LinePrefix = '!{LinePrefix}';  // vertical starting point in document for all Messages and Activations
        let LineSuffix = '!{LineSuffix}';  // vertical length beyond the last message time
        let MessageSpacing = '!{MessageSpacing}';  // vertical distance between Messages at different steps
        let ActivityWidth = '!{ActivityWidth}';  // width of each vertical activity bar
        let ActivityStart = '!{ActivityStart}';  // height before start message time
        let ActivityEnd = '!{ActivityEnd}';  // height beyond end message time
        let source = '!{source}';
        let paletteData = !{palette};
        let lightText = 'whitesmoke';
        var diagramTypes = !{diagramTypes};
        var elementTypes = !{elementTypes};
        $(function () {
            var items = [];
            var i = 0;
            var activeText;
            for (var type in diagramTypes) {
                var active = diagramTypes[type];
                if (active) {
                    items.push('<li role="presentation"><a role="menuitem" tabindex="' + i + '" href="/open-archi/editor?type=' + type + '" class="active">' + type + '</a></li>');
                    activeText = type;
                } else {
                    items.push('<li role="presentation"><a role="menuitem" tabindex="' + i + '" href="/open-archi/editor?type=' + type + '">' + type + '</a></li>');
                }
                i++;
            }
            var $diagramTypesDropdown = $("#diagramTypesDropdown");
            $diagramTypesDropdown.append(items.join(''));
            if (activeText) {
                var find = $("#dropdown-anchor-diagramTypesDropdown");
                find.html(activeText + "<span class=\"caret\"></span>");
            }
            $diagramTypesDropdown.on('click', 'a', function () {
                var text = $(this).html();
                var htmlText = text + ' <span class="caret"></span>';
                $(this).closest('.dropdown').find('.dropdown-toggle').html(htmlText);
            });

            var elementTypeItems = [];
            i = 0;
            elementTypes.forEach(function (elementType, i) {
                elementTypeItems.push('<li role="presentation"><a role="menuitem" tabindex="' + i + '" href="#">' + elementType + '</a></li>');
            });
            var elementTypesDropdown = $("#elementTypesDropdown");
            elementTypesDropdown.append(elementTypeItems.join(''));
            elementTypesDropdown.on('click', 'a', function () {
                var text = $(this).html();
                var htmlText = text + ' <span class="caret"></span>';
                $(this).closest('.dropdown').find('.dropdown-toggle').html(htmlText);
            });
        });
    script(type='text/javascript', src='/javascripts/diagrams/basic.js')
    script(type='text/javascript', src='/javascripts/diagrams/palette.js')
    script(type='text/javascript', src='/javascripts/editor.js')

block extra-menu-elements
    +nav_item_dropdown("#", null, "diagramTypesDropdown")(label="Diagram Type")
    +nav_item_dropdown("#")(label="Edit")
        +nav_item("/open-archi/editor") New
        +nav_item("#")(onclick="validateModel()", id="ValidateModel") Validate
        +nav_item("#")(onclick="save()", id="SaveButton") Save
        +nav_item("#")(onclick="load()", id="LoadButton") Load
        +nav_item("#")(onclick="openSVG()", id="OpenSVGButton") Export as SVG
    if examples
        +nav_item_dropdown("#", null, "sectionsExamples")(label="Examples")
            each example in examples
                +nav_item("#")(onclick="openContent('" + example.url + "');", resource=example.url)= example.name
    +nav_item("#")
        input#diagramId(name='diagramId', placeholder='Template name...')

block content
    +modal-force("Basic element data", "basic-element-data")(save="checkAndSave", more="openMore")
        form#basic-element-form
            .form-group
                label.col-form-label(for="element-name") Name:
                input.form-control#element-name(type="text")
            .form-group
                label.col-form-label Type:
                .dropdown
                    button.btn.btn-default.dropdown-toggle#element-type(type="button", data-toggle="dropdown")
                        | Element Types
                        | &nbsp;
                        span.caret
                    ul.dropdown-menu#elementTypesDropdown(role="menu", aria-labelledby="elementTypesDropdown")
            .form-group
                label.col-form-label(for="element-prototype")
                    | Prototype?
                    | &nbsp;
                input#element-prototype(type="checkbox")
    +modal("Model Validation", "model-validation")
        h4 The entire JSON Model will be passed the to the Rules as a Service that use a Drools' Desition Table based model's validation implementation
        p [Later it could be a Cucumber based Test set]
        +list-group-custom
            +list-group-item("#")
                Validation issue #1
            +list-group-item("#")
                Validation issue #2
    #diagramDiv
    #diagramsCanvas.container(style="justify-content: space-between")
        if explanation
            #explanation
                h2#mainTitle(style="margin-top: 0; padding-top: 0; margin-bottom: 30px;")= mainTitle
                h2#caption(style="margin-top: 0; padding-top: 0; margin-bottom: 30px; color: red; text-align: right;")= caption
                p= fullDescription
                if steps
                    ul
                        each step in steps
                            li= step
                if mainTitle
                    strong Like all other elements, we can combine these features with those in other examples to create more complex capabilities
    div.draggable#paletteDraggable(style="height: 300px; position: relative")
        div.handle#paletteDraggableHandle
            | Palette
        div#paletteContainer
            div#paletteDiv
    div.draggable#infoDraggable(style="display: inline-block; vertical-align: top; padding: 5px; top: 20px; left: 380px; position: relative")
        div.handle#infoDraggableHandle
            | Info
        div
            div#myInfo
    br
    div.container-fluid.draggable#dataModelDraggable(style="height: 100px; width: 400px;")
        div.handle#dataModelDraggableHandle
            | Model
        div#dataModelContainer
            span#modelToSaveOrLoad(style="display: block")
