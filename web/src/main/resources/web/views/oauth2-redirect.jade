body(onload="run()")
script(src="/javascripts/jquery-3.3.1.min.js")
script.
    'use strict'

    function enableTryItOutButtons() {
        let buttons = $(".btn.try-out__btn.disabled");
        buttons.removeClass('disabled');
    }

    function run() {
        const oauth2 = window.opener.swaggerUIRedirectOauth2;
        console.log(JSON.stringify(oauth2));
        const sentState = oauth2.state;
        const sentScopes = oauth2.auth.scopes;
        const redirectUrl = oauth2.redirectUrl;
        let isValid, qp, arr, hasAllScopes;

        if (/code|token|error/.test(window.location.hash)) {
            qp = window.location.hash.substring(1);
        } else {
            qp = location.search.substring(1);
        }
        console.log(qp);
        console.log(sentScopes);
        arr = qp.split("&");
        arr.forEach(function (v, i, _arr) {
            _arr[i] = '"' + v.replace('=', '":"') + '"';
        });
        qp = qp ? JSON.parse('{' + arr.join() + '}',
            function (key, value) {
                return key === "" ? value : decodeURIComponent(value)
            }
        ) : {};

        //isValid = qp.state === sentState;
        isValid = true;
        hasAllScopes = sentScopes.containsAll(qp.scopes);
        if ((
                oauth2.auth.schema.get("flow") === "accessCode" ||
                oauth2.auth.schema.get("flow") === "authorizationCode"
            ) && !oauth2.auth.code) {
            if (!isValid) {
                oauth2.errCb({
                    authId: oauth2.auth.name,
                    source: "auth",
                    level: "warning",
                    message: "Authorization may be unsafe, passed state was changed in server Passed state wasn't returned from auth server"
                });
            }
            if (!hasAllScopes) {
                oauth2.errCb({
                    authId: oauth2.auth.name,
                    source: "auth",
                    level: "warning",
                    message: "Scopes approved: " + scopes
                });
            }
            if (qp.code) {
                delete oauth2.state;
                oauth2.auth.code = qp.code;
                oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});
                enableTryItOutButtons();
            } else {
                oauth2.errCb({
                    authId: oauth2.auth.name,
                    source: "auth",
                    level: "error",
                    message: "Authorization failed: no accessCode received from the server"
                });
            }
        } else {
            oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});
        }
        //window.close();
    }
